# DexGuard's default settings are fine for this sample application,
# but we'll add some more layers of obfuscation to the license checking parts.

# Display some more statistics about the processed code.
-verbose

# Encrypt license-related strings from the sample application:
# * all strings in the sensitive classes, including the
#   Base64-encoded public key from the Google Play store.
# * all strings defined in the Consts class (inlined
#   in other classes by the compiler).
# * the specific market URL.
-encryptstrings class com.example.dungeons.Security
-encryptstrings class com.example.dungeons.BillingService*
-encryptstrings class com.example.dungeons.Consts*
-encryptstrings class com.example.dungeons.Dungeons$Managed
-encryptstrings class com.android.vending.billing.IMarketBillingService*

-encryptstrings class com.example.dungeons.Consts** {
    public static final java.lang.String *;
}

-encryptstrings "market://details?id="

# Encrypt important billing classes.
-encryptclasses com.example.dungeons.Security
-encryptclasses com.example.dungeons.BillingService$RequestPurchase

# Remove Android logging code (at least in the release version, for which
# optimization is switched on). This is important, to remove many obvious
# debug traces to the in-app billing code.
-assumenosideeffects class android.util.Log {
    public static int v(...);
    public static int i(...);
    public static int w(...);
    public static int d(...);
    public static int e(...);
}
