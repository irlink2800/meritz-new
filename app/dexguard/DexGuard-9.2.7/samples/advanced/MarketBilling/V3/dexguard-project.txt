# DexGuard's default settings are fine for this sample application,
# but we'll add some more layers of obfuscation to the license checking parts.

# Display some more statistics about the processed code.
-verbose

# Encrypt license-related strings from the sample application:
# * all strings in the sensitive classes, including the
#   Base64-encoded public key from the Google Play store.
# * all strings defined in the IabHelper class (inlined
#   in other classes by the compiler).
# * the name of the billing service.
-encryptstrings class com.example.android.trivialdrivesample.util.Security
-encryptstrings class com.android.vending.billing.IInAppBillingService**

-encryptstrings class com.example.android.trivialdrivesample.util.IabHelper {
    public static final java.lang.String *;
}

-encryptstrings "com.android.vending.billing.InAppBillingService.BIND"

# Encrypt important billing classes.
-encryptclasses com.example.android.trivialdrivesample.util.Security

# The following setting currently breaks the application.
#-encryptclasses !com.example.android.trivialdrivesample.util.IabHelper$*Listener,
#                com.example.android.trivialdrivesample.util.Iab*

# Remove Android logging code (at least in the release version, for which
# optimization is switched on). This is important, to remove many obvious
# debug traces to the in-app billing code.
-assumenosideeffects class android.util.Log {
    public static int v(...);
    public static int i(...);
    public static int w(...);
    public static int d(...);
    public static int e(...);
}

-assumenosideeffects class com.example.android.trivialdrivesample.util.IabHelper {
     void logDebug(java.lang.String);
     void logWarn(java.lang.String);
     void logError(java.lang.String);
}
