/*
 * Sample application to illustrate processing with DexGuard.
 *
 * Copyright (c) 2012-2020 Guardsquare NV
 */
package com.example

import android.graphics.Color
import android.os.Bundle
import android.support.v7.app.AppCompatActivity
import android.widget.TextView
import kotlin.reflect.full.memberProperties


/**
 * Sample activity that demonstrates the effects of -keep rules and -keepkotlinmetadata
 * on Kotlin reflection.
 */
class HelloWorldActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        this.setContentView(R.layout.table)

        val classNameTextView = findViewById<TextView>(R.id.classname)
        val isDataTextView    = findViewById<TextView>(R.id.dataclass)
        val firstnameTextView = findViewById<TextView>(R.id.firstname)
        val surnameTextView   = findViewById<TextView>(R.id.surname)
        val stringToTextView  = findViewById<TextView>(R.id.tostring)

        // A simple example of reflection - a class reference to the Person class
        val person = Person::class

        classNameTextView.text = person.qualifiedName
        // Expected name if there is a keep rule for the class
        // -keep class com.example.Person
        if (person.qualifiedName != "com.example.Person") {
            classNameTextView.setBackgroundColor(Color.RED)
        }

        // The isData flag is Kotlin specific so if the Kotlin metadata
        // is removed then we cannot tell if it is a data class or not.
        // Requires the -keepkotlinmetadata config option
        if (!person.isData) {
            isDataTextView.text = "No"
            isDataTextView.setBackgroundColor(Color.RED)
        }

        // The firstname and surname fields must be kept as we access them by name.
        // We also need to keep and adapt the Kotlin metadata with -keepkotlinmetadata
        if (person.memberProperties.count { prop -> prop.name == "firstname" } == 0) {
            firstnameTextView.text = "Not Found"
            firstnameTextView.setBackgroundColor(Color.RED)
        }

        if (person.memberProperties.count { prop -> prop.name == "surname" } == 0) {
            surnameTextView.text = "Not Found"
            surnameTextView.setBackgroundColor(Color.RED)
        }

        // The toString method of a data class is auto-generated by the Kotlin compiler.
        // DexGuard will update the property names in toString if the property names are obfuscated.
        val personInstance = Person("John", "Doe")
        stringToTextView.text = personInstance.toString()
        if (personInstance.toString() != "Person(firstname=John, surname=Doe)") {
            stringToTextView.setBackgroundColor(Color.RED)
        }
    }
}
