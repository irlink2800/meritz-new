{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"JavaScript Obfuscator Welcome to the Guardsquare JavaScript obfuscator manual. The JavaScript obfuscator is software to protect your JavaScript programs against reverse engineering. The JavaScript obfuscator supports all language features of the ECMAScript 6 specification, also known as ECMAScript 2015. This manual will guide you in hardening your application using a variety of obfuscation and encryption techniques. It is recommended to follow the quick start guide to set up the integration with DexGuard, and read the best practices section to create an initial configuration for your application. DexGuard Integration Best Practices","title":"Home"},{"location":"index.html#javascript-obfuscator","text":"Welcome to the Guardsquare JavaScript obfuscator manual. The JavaScript obfuscator is software to protect your JavaScript programs against reverse engineering. The JavaScript obfuscator supports all language features of the ECMAScript 6 specification, also known as ECMAScript 2015. This manual will guide you in hardening your application using a variety of obfuscation and encryption techniques. It is recommended to follow the quick start guide to set up the integration with DexGuard, and read the best practices section to create an initial configuration for your application. DexGuard Integration Best Practices","title":"JavaScript Obfuscator"},{"location":"about/license.html","text":"License, services and maintenance Agreement Version May 2017 This agreement (the \u201cAgreement\u201d) is concluded on the date of last signature of the Order in which it is included by reference (the \u201cEffective Date\u201d) by and between the Guardsquare group contracting entity specified in the relevant Order (\u201cGuardsquare\u201d), and the client contracting entity specified in the relevant Order (the \u201cClient\u201d). Guardsquare and the Client may individually be referred to as a \u201cParty\u201d and jointly as \u201cthe Parties\u201d. PREAMBLE Whereas Guardsquare has developed and owns certain software and is in the business of licensing such software and providing support, maintenance and other professional services in connection with such software; Whereas the Client wishes to obtain from Guardsquare the right to use such software and to be provided with support and other services in connection with such software; Whereas Guardsquare is willing to license such software to the Client and to provide the Client with maintenance and support services and other professional services in connection with such software as set forth in this Agreement. NOW THEREFORE, the Parties hereby agree as follows: 1. Definitions 1.1 When used in this Agreement, the following terms shall have the meaning ascribed to them below: \u201cAcceptance Date\u201d means the date on which the Licensed Products or Deliverables (as applicable) are agreed by the Client to conform to the relevant Specifications; \u201cApplications\u201d means the (number of) applications as specified in an Order. An Application, published by the Client, may be used by several Client end users in which case the code, assets and libraries of the Application will be identical for each end user; \u201cConfidential Information\u201d of a Party means the information of such Party, whether in written, oral, electronic or other form, which (i) is explicitly marked as confidential or proprietary, or (ii) should reasonably be considered confidential given its nature or the circumstances surrounding its disclosure, regardless of whether or not it is expressly marked as confidential, including (without being limitative) information and facts concerning a Party's and its affiliates' business plans, clients, prospects, personnel, suppliers, licensors, licensees, partners, investors, affiliates or others, training methods and materials, financial information, marketing plans, sales prospects, client lists, inventions, program devices, discoveries, ideas, concepts, know-how, techniques, formulas, blueprints, software (in object and source code form), documentation, designs, prototypes, methods, processes, procedures, codes, and any technical or trade secrets, including all copies of any of the foregoing and any analyses, studies or reports that contain, are based on, or reflect any of the foregoing. The Confidential Information of Guardsquare shall include, without being limitative, the Software and the Documentation; \u201cCustomisations Support Fee\u201d means the fees for the Support Services in respect of software Deliverables to the extent expressly agreed (in an Order) to be included under the Support Services; \u201cDeliverable\u201d means a deliverable to be provided by Guardsquare pursuant to, and designated as such in, an Order; \u201cDelivery Date\u201d means the agreed date on which the Licensed Products are made available to the Client by Guardsquare (which may include making available for download from a secure FTP site); \u201cDocumentation\u201d means the operating manual, including a description of the functions performed by the Software, user instructions, and all other related materials (excluding marketing material and any information posted on a (Guardsquare) website), as ordinarily supplied by Guardsquare to its customers to facilitate the use of the Software; \u201cEmployee\u201d means an individual who is hired pursuant to an employment contract in exchange for a wage. Agents, distributors, advisors, consultants, freelancers, (self-employed) (sub)contractors or any other third party shall not be considered Employees for the purposes of this Agreement; \u201cFees\u201d means the License Fees, Professional Services Fees, Support Fees, and fees in respect of General Support, and any other amounts payable by the Client to Guardsquare pursuant to this Agreement, as set out in an Order or as otherwise agreed in writing between duly authorized representatives of the Parties; \u201cGeneral Support\u201d means any support and maintenance services requested by the Client that are not in scope of the Support Services contracted by the Client (namely Basic Support or Gold Support, as specified in the relevant Order); \u201cIntellectual Property Rights\u201d means patents, trade marks, service marks, trade secrets, copyrights, design rights, know how, Confidential Information, trade and business names, domain names, database rights, sui generis rights (including in software), rental rights and any other intellectual or industrial property or similar right throughout the world (whether registered or unregistered), including applications for registration, renewals, extensions, continuations, divisions, reissues or improvements relating to any of these rights and the right to apply for, maintain and enforce any of the preceding items; \u201cInternal Business Purposes\u201d means use of the Software for the purpose for which it is licensed (as per the terms of the Documentation, Specifications and the license terms set out in this Agreement) with respect to the licensed (number of) Applications and SDKs only, excluding (without being limitative) sublicensing, reselling, redistribution, or otherwise commercializing or making the Software available to third parties (whether or not at a charge), and use of the Software with respect to applications or libraries other than the Applications and SDKs or with respect to Applications or SDKs that are not published by the Client; \u201cLicense Fees\u201d means the annually recurring fees payable by the Client in respect of the user rights in respect of the Licensed Products granted hereunder, which License Fees also include \u2018Basic Support\u2019 Support Services; \u201cLicense Parameters\u201d means the parameters defining and restricting the scope of the Software user rights granted pursuant to Section 2 of this Agreement, as specified in an Order and/or invoices issued by Guardsquare. License Parameters may include (non-exhaustive list) the (number of) Applications and SDKs, App Package names, Application names, SDK/library names, territorial restrictions, industry sector restrictions, number of Client end users and developers; \u201cLicensed Products\u201d means the Software and the Documentation; \u201cObject Code\u201d (or Bytecode) means software assembled or compiled in magnetic or electronic binary form on software media that is readable and usable by machines but not generally readable by humans without reverse assembly, reverse compiling or reverse engineering; \u201cOrder\u201d means an order entered into between the Parties pursuant to this Agreement, for the purchasing of Software licenses by the Client and the delivery of Support Services and/or Professional Services by Guardsquare to the Client; \u201cApp Package Name\u201d means the unique identifier of an Application (e.g. as per the app/build.gradle file), which is also unique in the Google Play store; \u201cProfessional Services\u201d means Software development, implementation and integration services, training, reviewing and testing services, or such other services in relation to the Software as may be agreed between the Parties from time to time, in an Order (but excluding Support Services).; \u201cProfessional Services Fees\u201d means the Fees payable by the Client in respect of the Professional Services and Deliverables, as set out in the relevant Order; \u201cSchedule\u201d means a schedule to this Agreement, if any; \u201cSDK\u201d means the (number of) libraries as specified in an Order. An SDK, published by the Client, may be used by several Client end users in which case the code, assets and libraries of the SDK will be identical for each end user; \u201cSoftware\u201d means the software listed in an Order, licensed to the Client by Guardsquare in accordance with the terms of this Agreement; \u201cSource Code\u201d means the Software written in programming languages including all comments and procedural code such as job control language statements, in a form intelligible to programmers trained in and knowledgeable of the Software, and capable of being translated into the Object Code form of the Software for operation on computer equipment through assembly or compiling; \u201cSpecifications\u201d means the specifications for the Software or Deliverables, as applicable, as expressly agreed in writing between the Parties; \u201cSupport Fees\u201d means the fees for the Support Services in respect of the Software. Support Fees payable in respect of the \u2018Basic Support\u2019 Support Services are included in the License Fees. \u2018Gold Support\u2019 Support Services shall be charged at an additional fee, as per the terms of the relevant Order; \u201cSupport Services\u201d means \u2018Basic Support\u2019 or \u2018Gold Support\u2019, as specified in Section 4 of this Agreement; \u201cWorking Day\u201d means any day except Saturday, Sunday or an official holiday in Guardsquare's or the Client's country of incorporation, as applicable. 1.2 In this Agreement (unless the context requires otherwise): a) Words importing the singular include the plural, words importing a particular gender include the other gender and words importing persons include bodies corporate and incorporate; and each case vice versa; b) The headings and captions contained in this Agreement are for convenience only and shall not affect the meaning, construction or interpretation of this Agreement or of any of its terms or provisions; c) Whenever the word \u201cinclude(s)\u201d or \u201cincluding\u201d is used in this Agreement, the enumeration that follows shall be deemed to be non-exhaustive. 1.3 In the event of a conflict between the terms of the Agreement and a Schedule, the latter shall prevail (unless expressly stipulated otherwise in the relevant Schedule). 2. License 2.1 Subject to the terms and conditions of this Agreement and timely payment of the License Fees by the Client, Guardsquare hereby grants to the Client a personal, restricted, non-exclusive, non-transferable, non-assignable license, without the right to sublicense, for the term specified in the relevant Order, to use the Licensed Products in accordance with the Documentation, in Object Code form only, exclusively in combination with the licensed (number of) Applications and SDKs and in accordance with the License Parameters, for the Client's Internal Business Purposes. The license shall commence on the Delivery Date of the Licensed Products, and shall continue unless and until terminated in accordance with the terms of this Agreement and the relevant Order. 2.2 The extent of the license granted under this Section 2.1 is restricted to the scope expressly set forth herein, and there are no implied licenses under this Agreement. Guardsquare reserves any right in or to the Licensed Products not expressly granted to the Client hereunder. The Client acknowledges and agrees that any use of the Licensed Products outside the scope of the license granted under Section 2.1., unless such use has been expressly approved in writing by a Guardsquare duly authorized representative, will entitle Guardsquare to immediately terminate (or alternatively, at Guardsquare's option, suspend) the license granted hereunder and/or the Agreement for material breach by Client, without any formalities being required and without prejudice to any other right or remedy available to Guardsquare pursuant to this Agreement or under applicable law. 2.3 The Client may not provide access to the Software or the Documentation to any third party other than its Employees who need such access in connection with the performance of their responsibilities to the Client, subject always to the license terms set forth in this Agreement, and who have committed in writing to confidentiality provisions at least as stringent as those set forth herein. Guardsquare shall provide the Client with one copy of the Documentation (in a format and through such means as reasonably determined by Guardsquare), which copy shall not be distributed to third parties and otherwise shall be subject to the restrictions contained in this Section 2. Additional copies of the Documentation can be made available at a charge, at the Client's reasonable request. 2.4 The Client agrees that it shall not itself, or through any affiliate, agent, (sub)contractor or other third party: (i) use the Software or Documentation other than for the Client's Internal Business Purposes and in connection with the Applications and SDKs; (ii) sell, lease, commercialize, rent, display, license, sublicense, transfer, provide, disclose, or otherwise make available to, or permit the use of or access to, the Software or the Documentation, in whole or in part, to any third party, whether or not related to the Client, except as expressly permitted in this Agreement; (iii) modify the Software or Documentation or develop any derivative works based on the Software, Documentation or any Confidential Information of Guardsquare; (iv) use the Software except as expressly authorized herein; (v) decompile, disassemble, reverse engineer or attempt to reconstruct, identify or discover any Source Code, underlying ideas, underlying user interface techniques or algorithms of the Software by any means whatsoever (except to the extent such restriction is prohibited under applicable law), or disclose any of the foregoing; (vi) encumber or suffer to exist any lien or security interest on the Licensed Products; (vii) take any action that would cause the Software, the Source Code or the Documentation to be placed in the public domain; (viii) use the Software in an environment not expressly permitted under this Agreement; (ix) remove or alter any copyright or other proprietary notice on any of the Licensed Products; or (x) make any Software functionality in any way visible or accessible, or otherwise disclose it, to any third party (including Client's end users), whether on a standalone basis or embedded in the Client's products (e.g. in Client's Applications or SDKs); the Client shall take all such (technical and organizational) (security) measures, including in respect of its own products (including the Applications and SDKs) as is necessary to protect the Software against such unauthorized access or other disclosure. Upon Guardsquare's request, the Client shall provide Guardsquare with such information, certifications and access to its systems as may reasonably be requested by Guardsquare to verify compliance with the license terms and restrictions on the use of the Licensed Products as set forth herein. 2.5 The Client acknowledges and agrees that any modification or attempted modification of the Licensed Products by any party other than Guardsquare will void Guardsquare's warranties with respect to the Licensed Products and will be deemed to represent a material breach of this Agreement by the Client. 2.6 The Client shall maintain up-to-date electronic records of the number of copies of the Licensed Products in its possession and/or under its control at any given point in time and their locations and, upon Guardsquare's first request, shall forthwith provide Guardsquare with such records. 2.7 The Client shall comply with all applicable laws relating to the use of the Licensed Products. The Client acknowledges and agrees that the Licensed Products may include encryption and may, accordingly, be subject to additional export or other restrictions which the Client agrees to comply with. 3. Delivery and acceptance 3.1 The Client shall deliver the Licensed Products and Deliverables to the Client on the Delivery Date. The Delivery Date shall be the Licensed Products and Deliverables (as applicable) Acceptance Date, on which the Licensed Products and Deliverables (as applicable) shall be deemed accepted by the Client for their use as permitted under this Agreement, and as of which the Software (and the software Deliverables to the extent expressly agreed to be in scope of the Support Services) shall be supported by Guardsquare as set out in Section 4 of this Agreement, subject to timely payment of the Support Fees (and Customisations Support Fees, as applicable). From the time of delivery, all risk relating to loss of or damage to the Licensed Products and Deliverables shall pass to the Client. 3.2 Upon Guardsquare's first request, the Client shall without undue delay provide Guardsquare with a duly signed Software and software Deliverable delivery acknowledgement and/or acceptance form, in a Guardsquare approved format. 4. Support Services 4.1 Guardsquare shall provide the Client with the Support Services and/or General Support in accordance with this Section 4 and the relevant Order, provided the Client pays the applicable Support Fees (and Customisations Support Fees where applicable) and Fees for General Support as set forth in the relevant Order. The Support Services may consist of \u2018Basic Support\u2019 or \u2018Gold Support\u2019. Whether \u2018Basic Support\u2019 or \u2018Gold Support\u2019 applies shall be specified in the relevant Order. \u2018Basic Support\u2019 consists of the following*: Software updates and basic support for installing the Software in build processes (with Gradle, Maven, Ant, Eclipse) and support for resolving Software issues, such as bugs. The Basic Support response time is 3 Working Days from receipt of a duly reported support request (as per the process set out below). Support is provided by email only. \u2018Gold Support\u2019 consists of the following*: Basic Support, provided that the response time is 1 Working Day from receipt of a duly reported support request (as per the process set out below), and full, step by step project assistance for configuring and troubleshooting Software settings. Support may be provided by email or phone. In summary*: - Basic Support: bug fixes, setup assistance, response within 3 business days, support by e-mail. - Gold Support: bug fixes, setup assistance, project-specific support, configuration optimization, priority handling (response within 1 business day), support by e-mail and by phone. *as may be updated by Guardsquare from time to time Support Services cover the current version of the Software (as per Guardsquare's software versioning scheme). Bug fixing covered by the Support Services only covers defects attributable to the Software or to Guardsquare. Any onsite support is not in scope of the Support Services and, if requested by the Client, shall be additionally charged to the Client as General Support. The Client acknowledges and agrees that Guardsquare does not wish to receive any personal or other sensitive data (whether related to the Client, the Client's customers or otherwise) pursuant to this Agreement (unless expressly otherwise requested by Guardsquare for the purposes of fulfilling its obligations hereunder), and the Client undertakes to sanitise (including through anonymisation) any (personal) data submitted to Guardsquare pursuant to this Agreement. If the Client fails to meet this obligation (save where Guardsquare expressly requested to receive such data), Guardsquare cannot be held to be in breach of any data protection, information security or confidentiality obligations under the Agreement by processing such data in performing the Agreement and cannot incur any liability, liquidated damages or penalties in this respect. 4.2 Support process: The Client shall appoint one or more representatives that are authorised to request Support Services and General Support. The Client may replace its authorized representatives from time to time by prior written notice to Guardsquare (including by email to the designated email address). Whenever the Client requires Guardsquare to perform either Support Services or General Support pursuant to this Section 4, the Client shall submit a request by means of its authorised representatives. The service desk may be contacted directly by email in case of Basic Support, and by email or telephone if Gold Support. Guardsquare shall provide contact details for the service desk to the Client and shall inform the Client of any changes to those contact details. When reporting issues to the service desk, the Client will provide the necessary diagnostic information to enable Guardsquare to reproduce any reported defect and adequately address the Client support request. The service desk contact details are as follows (as may be updated from time to time by Guardsquare): Email*: support@guardsquare.com Telephone Guardsquare: +32 16 298 391 Download site: https://www.guardsquare.com 5. Intellectual Property Rights 5.1 Licensed Products. The Software (in Object Code and Source Code form) and Documentation, and all copies thereof, including any rights, title and interest (including any Intellectual Property Rights) therein, shall at all times remain the sole and exclusive property of Guardsquare and/or its licensors, and the Client shall not obtain any rights, title or interest (including any Intellectual Property Rights) therein except for the restricted user rights expressly granted hereunder. The Client hereby acknowledges that Guardsquare and its licensors shall retain all right, title and interest (including any Intellectual Property Rights) to any derivative works (in Object Code and Source Code form) of the Software and Documentation (including to any customization, enhancement, modification, improvement, update, upgrade or new release of the Software and the Documentation). In the event that, notwithstanding any prohibition thereto, the Client (or any third party acting on its behalf or under its control) modifies or creates derivative works from the Software or Documentation (collectively \u201cImprovements\u201d), Guardsquare shall automatically and irrevocably own all right, title and interest, including any Intellectual Property Rights, in and to such Improvements and the Client hereby assigns any rights (including Intellectual Property Rights) in such Improvements to Guardsquare and agrees to secure any additional confirmations, assignments and other instruments and documents as may be necessary to vest title to any such Improvements in Guardsquare as contemplated by this Section 5.1. No amount shall be payable by Guardsquare to the Client for the assignment of such rights in the Improvements as set forth herein. 5.2 Deliverables. Guardsquare shall own all rights, title and interest, including any Intellectual Property Rights, in Deliverables developed by Guardsquare pursuant to the Agreement, and subject to timely payment of the corresponding Professional Services Fees, Guardsquare shall grant the Client the right to use such Deliverables on terms identical to those contained in Section 2 of the Agreement. Subject to Guardsquare's obligation of confidentiality as set forth in the Agreement, nothing in the Agreement, its Schedules or an Order shall prevent Guardsquare from acquiring, developing, marketing, using for itself or providing to third parties deliverables that are similar or identical to the Deliverables. Notwithstanding anything to the contrary in this Agreement, its Schedules or an Order, (i) Guardsquare shall be free to use the ideas, concepts, methodologies, processes and know-how developed or learned by Guardsquare in the course of performing the Professional Services, and (ii) Guardsquare shall in any event retain all rights, title and interest (including any Intellectual Property Rights) in its Pre-existing Intellectual Property and derivative works thereof. For the purposes of this clause 5.2, Guardsquare's Pre-existing Intellectual Property includes the proprietary tools, methodologies, materials, know-how, processes, technologies, modules, components, programs, analyses, and frameworks developed or used by Guardsquare prior to the Effective Date or developed independently from this Agreement. 5.3 The Client agrees not to remove, obscure or modify in any way any Guardsquare proprietary marking, including any trademark or copyright notice, on or in the Licensed Products and Deliverables or on any Licensed Product or Deliverables media. The Client shall reproduce and incorporate such proprietary markings in any Licensed Product and Deliverable back-up and other copies. 5.4 The Client agrees to promptly notify Guardsquare if the Client becomes aware that any third party is violating or infringing Guardsquare's rights of whatever nature in any of the Licensed Products or Deliverables. Guardsquare shall have the right (at its discretion), to prosecute such violator or infringer at its expense and to retain the full amount of any sums recovered as damages. The Client agrees to provide, at Guardsquare's request and expense, all necessary cooperation to Guardsquare in the event of the commencement of any such proceedings by Guardsquare. 5.5 The Client acknowledges and agrees that in order to use the Software and/or the Deliverables, the Client may need to obtain, at the Client's expense, the right to use any third party software as communicated by Guardsquare from time to time. 6. Confidentiality 6.1 Each of the Parties agrees that it shall, both during the term of this Agreement and following termination or expiration of this Agreement (i) not disclose any Confidential Information of the other Party, except to those of its Employees, officers, directors, contractors and affiliates that have a demonstrable legitimate need to know such information in light of the Parties' rights and obligations hereunder, subject to each of them committing in writing to confidentiality obligations at least as stringent as those set forth herein prior to being granted access to such Confidential Information and subject to any other conditions and restrictions set out in this Agreement, and (ii) use any Confidential Information of the other Party only for the purpose of the performance of the Agreement, excluding any use for its own benefit or that of any third party, except as expressly permitted under this Agreement. 6.2 Each of the Parties shall ensure that each person to whom it provides/who otherwise receives (directly or indirectly) Confidential Information pursuant to this Agreement is made aware of and complies with the confidentiality obligations under this Agreement as if they were a party to this Agreement. Each of the Parties shall be responsible and liable towards the other Party for a breach of these confidentiality obligations by any party acting under their control or on their behalf or to whom they otherwise provided Confidential Information. 6.3 The confidentiality obligations set forth herein shall not apply in respect of information which: (i) is in the public domain at the time of disclosure or subsequently falls into the public domain through no breach of this Section 6 by the receiving Party, provided that the Client acknowledges and agrees that Confidential Information of Guardsquare shall not be deemed to be in the public domain merely because any part of said information is embodied in general disclosures or because individual features, components, or combinations thereof are now, or become, known to the public, through whatever means, including through means of the supply or commercialization of products or services based on or related to such Confidential Information; (ii) was rightfully in the receiving Party's possession, without any confidentiality restrictions attached to it, prior to receipt of such information from the disclosing Party hereunder; (iii) is rightfully and lawfully obtained from a third party which iss not under an obligation of confidentiality with respect to such information; (iv) was independently developed by the receiving Party, without access or reference to, or use of, the disclosing Party's Confidential Information; each as can be demonstrated and substantiated by the receiving Party in reasonable detail. 6.4 The Parties' confidentiality obligations as set forth herein shall survive termination of the Agreement. Upon termination of the Agreement or a disclosing Party's earlier written request, the receiving Party shall promptly return to the disclosing Party or destroy (at the disclosing Party's option) all Confidential Information of the disclosing Party in its possession or under its control. 7. Fees 7.1 As consideration for the Software licenses granted pursuant to an Order and for the Support Services/General Support and Professional Services, the Client agrees to pay to Guardsquare the Fees, in accordance with the invoicing schedule set forth in the relevant Order or other written agreement between the Parties. Expenses (including travel (incl. local transport and flights), accommodation and out-of-pocket expenses) incurred by Guardsquare in furtherance of this Agreement shall be charged to the Client at Guardsquare's cost, in addition to the Fees. Where reasonably possible, such expenses shall be subject to the Client's prior consent (such consent not to be unreasonably delayed or withheld) and shall be evidenced by receipts. 7.2 Undisputed invoices are due and payable by the Client within thirty (30) days from the invoice date. All payments made by the Client to Guardsquare under this Agreement shall be final and non refundable. The amount of any invoice which has not been paid within thirty (30) days from the invoice date shall automatically be subject to a late payment interest equal to 1.5% per month, which interest shall be compounded daily as of the due date until receipt of full payment by Guardsquare. In addition, the Client shall pay all costs incurred by Guardsquare as a result of the (extra)judicial enforcement of the Client's payment obligations hereunder. If the Client fails to pay any outstanding amounts by the due date, Guardsquare may also suspend its obligations and the Client's (user) rights hereunder until receipt of payment of such outstanding amounts. 7.3 All Fees payable to Guardsquare under this Agreement shall be paid without the right to set off or counterclaim. 7.4 If the Client disputes any portion of an invoice, the Client shall notify Guardsquare without undue delay and in any event within the payment term of the nature of any such dispute, the basis for the Client's dispute and the amount involved, together with any appropriate information supporting the Client's position, failure of which shall result in the invoice being deemed accepted by the Client. The undisputed portion of the invoice shall be paid as set forth herein. 7.5 Sums stated to be payable under this Agreement do not include any applicable taxes, which shall be additionally charged to and paid by the Client. All fees payable to Guardsquare under this Agreement shall be paid free and clear of all deductions and withholdings whatsoever unless the same are required by law, in which case the Client undertakes to pay Guardsquare such additional amounts as is necessary in order that the net amounts received by Guardsquare after all deductions and withholdings shall not be less than such payments would have been in the absence of such deductions or withholding. 7.6 Guardsquare may annually (starting 1 January following the Effective Date) increase the Professional Services Fees (including any agreed rate card), the License Fees and the (Customisations) Support Fees (as well as any other recurring Fee component as may exist from time to time) on the basis of the Belgian consumer price index, without any formalities being required. 7.7 The Client shall keep accurate business records of its use of the Licensed Products for as long as it is entitled to use the Licensed Products as per the terms of this Agreement. Such business records must include details of the License Parameters. The Client shall retain those records for at least three years (3) after any termination of its right to use the relevant Licensed Products. Guardsquare and/or its agents may inspect and review such business records, the Client's premises and any other information relevant to verify the Client's compliance with this Agreement upon reasonable notice (except where such notice would defeat the purpose of the audit), during normal business hours during the term of the Client's user rights hereunder and for a period of three (3) years thereafter, provided that such inspection right may not be exercised more than twice during any calendar year period, except where Guardsquare has reasonable grounds to believe the Client is acting in breach of this Agreement. If such inspection shows that the Client has underpaid the amount of Fees due to Guardsquare (without limitation, as a result of the Client using the Software in excess of the licensed License Parameters), without prejudice to any other rights and remedies available to Guardsquare hereunder, the Client shall promptly pay the amount of any such underpayment to Guardsquare together with any applicable late payment interest (as per clause 7.2 hereof). The Client and Guardsquare shall each bear their own cost related to any such review and inspection, provided that in the event of an underpayment by the Client or any other contractual breach as determined by such review and inspection, all costs related to such review and inspection shall be borne by the Client, without prejudice to any other rights and remedies available to Guardsquare hereunder. 8. Warranties 8.1 Guardsquare warrants to the Client as follows: (a) Guardsquare is a corporation duly organized and validly existing under the laws of its incorporation and has all requisite power and authority to execute and deliver this Agreement and to perform its obligations hereunder. The execution, delivery and performance of this Agreement have been duly authorized by all requisite action on the part of Guardsquare and this Agreement constitutes the legal, valid and binding obligation on Guardsquare, enforceable in accordance with its terms. (b) Guardsquare shall perform the Agreement in a professional manner, using reasonable skill and care. (c) Except as expressly set forth in this Section 8, the Licensed Products, Deliverables, Professional Services and Support Services/General Support are provided \u201cas is.\u201d The express warranties set forth in this section 8 are the only warranties made by Guardsquare with respect to this Agreement. Guardsquare makes no other warranties, express or implied, including warranties of merchantability and fitness for a particular purpose. The Client shall have the sole responsibility to adequately protect and backup its data and equipment used in connection with the Software. 8.2 The Client warrants to Guardsquare as follows: (a) the Client is duly organized, validly existing and in good standing under the laws of its incorporation and has all requisite power and authority to execute and deliver this Agreement and to perform its obligations hereunder, and the execution, delivery and performance of this Agreement have been duly authorized by all requisite action on the part of the Client and this Agreement constitutes the legal, valid and binding obligation of the Client, enforceable in accordance with its terms. (b) the information provided by the Client for Guardsquare to be able to determine the License Parameters (without limitation, the (number of) Applications and SDKs, number of Client end users and developers, (number of) App Package names) and thus also the License Fees, is correct. (c) the Applications and SDKs will be published by the Client. If at any time during this Agreement, the Client notices or suspects that wrong assumptions have been made or any of these warranties prove incorrect, it shall promptly notify Guardsquare thereof in writing. 9. Indemnification 9.1 Guardsquare shall defend and indemnify the Client as specified herein against any claims brought by third parties to the extent such claim is based on an infringement of the Intellectual Property Rights of such third party by the Licensed Products and excluding any claims resulting from (i) the unauthorized use of the Licensed Products, (ii) the modification of any of the Licensed Products other than by Guardsquare, (iii) failure to use the most recent version of the Licensed Products made available to the Client, or failure to integrate or install any corrections to such Licensed Products issued by Guardsquare, if Guardsquare indicated that such update or correction was required to prevent a(n) (potential) infringement, (iv) use of the Licensed Products in combination with any non-Guardsquare products or services, or (v) the Software having been developed to the Client's design or incorporating documents, materials, ideas, data or other information, provided by or on behalf of the Client. Such indemnity obligation shall be conditional upon the following: (i) Guardsquare is given prompt written notice of any such claim; (ii) Guardsquare is granted sole control of the defense and settlement of such a claim; (iii) upon Guardsquare's request, the Client fully cooperates with Guardsquare in the defense and settlement of such a claim, at Guardsquare's expense; and (iv) the Client makes no admission as to Guardsquare's liability in respect of such a claim, nor does the Client agree to any settlement in respect of such a claim without Guardsquare's prior written consent. Provided these conditions are met, Guardsquare shall indemnify the Client for the damages and costs incurred by the Client as a result of such a claim, as awarded by a competent court of final instance or as agreed to by Guardsquare pursuant to a settlement agreement. 9.2 In the event the Licensed Products, in Guardsquare's reasonable opinion, are likely to become or become the subject of a third-party infringement claim (as per clause 9.1), Guardsquare shall have the right, at its sole option and expense, to: (i) modify the (allegedly) infringing part of the Licensed Products so that they become non-infringing while preserving equivalent functionality; (ii) obtain for the Client a license to continue using the Licensed Products in accordance with this Agreement; or (iii) terminate the relevant license and pay to the Client an amount equal to a pro rata portion of the License Fee paid to Guardsquare hereunder for that portion of the Licensed Products which is the subject of such infringement, such portion being based on a straight line depreciation over a five year term beginning on the Delivery Date of the Licensed Product at issue. 9.3 The foregoing states the entire liability and obligation of Guardsquare and the sole remedy of the Client with respect to any infringement or alleged infringement of any Intellectual Property Rights caused by the Licensed Products or any part thereof. 10. Limitations on Liability 10.1 To the maximum extent permitted by applicable law, Guardsquare excludes its liability (whether in contract, warranty, tort (including as a result of negligence, product liability or other theory) or otherwise) to the Client or any other person for recovery or recoupment of any investment made by the Client, its affiliates or any third parties acting on their behalf or under their control, in connection with this Agreement, and for any indirect, punitive, special or consequential damages, or damages for loss of profit, revenue, business, contracts or clients, loss or corruption of data, loss of goodwill, reputational harm, opportunity loss, loss of anticipated savings, and the cost of procuring replacement goods or services, arising out of or relating to this Agreement, even if Guardsquare has been advised of the possibility of such costs or damages arising. 10.2 Without prejudice to and without limiting Section 10.1 of this Agreement, to the maximum extent permitted under applicable law, Guardsquare's liability arising out of or in connection: a) with this Agreement (other than as covered under (b), (c) and (d) below), whether in contract, warranty, tort (including negligence, product liability or other theory), or otherwise, shall not exceed the total License Fees (excl. taxes) paid to Guardsquare by the Client under this Agreement during the twelve (12) month period preceding the date on which the applicable liability claim arose, provided that Guardsquare's aggregate liability in this respect shall not exceed the total License Fees (excl. taxes) paid under the Agreement; b) with the Support Services provided by Guardsquare to the Client under this Agreement, whether in contract, warranty, tort (including negligence, product liability or other theory), or otherwise, shall not exceed fifty (50) percent of the total License Fees (excl. taxes and expenses) paid to Guardsquare by the Client under this Agreement during the twelve (12) month period preceding the date on which the applicable liability claim arose, provided that Guardsquare's aggregate liability in this respect shall not, per contract year, exceed the total License Fees (excl. taxes and expenses) paid under the Agreement in respect of the relevant contract year; c) with General Support provided by Guardsquare to Client under this Agreement, whether in contract, warranty, tort (including negligence, product liability or other theory), or otherwise, shall not exceed the Fees for General Support (excl. taxes and expenses) paid to Guardsquare by the Client under this Agreement in respect of the General Support to which the applicable liability claim relates during the twelve (12) month period preceding the date on which the applicable liability claim arose, provided that Guardsquare's aggregate liability in this respect shall not exceed the total Fees for General Support (excl. taxes and expenses) paid under the relevant Order in respect of such General Support; d) with the Professional Services provided by Guardsquare to the Client under the Agreement, whether in contract, warranty, tort (including negligence, product liability or other theory) or otherwise, shall not exceed the total Professional Services Fees (excl. taxes and expenses) paid by the Client to Guardsquare in respect of such Professional Services under the Order to which the liability claim relates during the twelve (12) month period preceding the date on which the applicable liability claim arose, provided that Guardsquare's aggregate liability in this respect shall not exceed the total Professional Services Fees (excl. taxes and expenses) paid under such Order. 10.3 The Client agrees that Guardsquare can only be held liable as per the terms of this Section 10 to the extent damages suffered by the Client are directly and solely attributable to Guardsquare. The exclusions and limitations of liability under this Section shall operate to the benefit of Guardsquare's affiliates and subcontractors under this Agreement to the same extent such provisions operate to the benefit of Guardsquare. 10.4 The Client's exclusive remedy for any claim arising out of or in connection with this Agreement shall be for Guardsquare, upon receipt of written notice, to use reasonable efforts to cure the breach or default at its expense, and failing that, Guardsquare's liability shall be limited as set forth in this Agreement. The Client shall have a duty to mitigate damages for which Guardsquare is responsible. 11. Term and Termination 11.1 This Agreement shall commence on the Effective Date and shall continue for the term of the Order to which it relates. As a default (unless deviated from in the relevant Order), Orders (including any Software licenses and Support Services contracted pursuant to such an Order) are entered into for an initial one (1) year term (the \u201cInitial Term\u201d). Upon expiry of this Initial Term, the Orders shall automatically renew for successive one (1) year periods (each a \u201cRenewal Term\u201d), unless terminated by either Party on giving at least three (3) months' written notice prior to the expiry of the Initial Term or then current Renewal Term. Neither Party shall be entitled to terminate the Agreement or an Order in whole or in part for convenience save as expressly permitted herein. 11.2 Termination of the Agreement shall not automatically result in termination of any Orders, which must be separately terminated as set forth herein. Time and Material Professional Services (portions of) Orders may be terminated by the Client for convenience only if expressly so stipulated in the relevant Order, on giving such notice as specified in such Order. Fixed price Professional Services (portions of) Orders may not be terminated for convenience, failure of which shall result in the full fixed price becoming payable by the Client upon termination. 11.3 Either Party may terminate this Agreement, the Support Services (if the default relates to the Support Services) or the portion of the Order that is the subject of the default, by written notice to the other Party, if the other Party materially breaches this Agreement, the Support Services related provisions or a specific portion of such Order (as applicable) and fails to (i) cure such breach within thirty (30) days from the date of receipt of a default notice by the defaulting Party, and (ii) make substantial progress to cure such breach and implement a remedial plan that results in a cure of such breach within sixty (60) days from receipt of such default notice, provided that Guardsquare shall be entitled to terminate this Agreement (in whole or in part) (or alternatively suspend its obligations and/or the Client's user rights granted hereunder) on giving written notice in the event the Client breaches the license terms hereunder or infringes Guardsquare's Intellectual Property Rights. 11.4 Either Party may terminate this Agreement or an Order by written notice to the other Party, effective as of the date of delivery of such notice, if the other Party becomes the subject of a voluntary or involuntary bankruptcy, insolvency or similar proceeding or otherwise liquidates or ceases to do business. Consequences of termination. 11.5 Upon termination of an Order for whatever reason, the licenses granted to the Client pursuant to such Order in accordance with Section 2 of this Agreement shall automatically terminate and the Client shall return to Guardsquare all copies (in whatever form or medium) of the Licensed Products. 11.6 Upon termination for convenience by the Client of an Order or any of the Licensed Product licenses other than as expressly permitted in Section 11.1, the full License Fees for the Initial Term and then current Renewal Term (as applicable) shall remain payable by the Client. In the event the Client terminates an Order or the Support Services for convenience other than as expressly permitted in Section 11.1, the Support Fees shall remain payable by the Client for the full then-current term (Initial Term or then current Renewal Term, as applicable). In the event the Client terminates the Agreement or an Order for convenience other than as expressly permitted in Section 11.2, the full Professional Services Fees and reimbursable expenses payable in respect of such Order shall remain payable by the Client. 11.7 In the event Guardsquare terminates the Agreement, Licensed Product licenses, Support Services or an Order pursuant to Sections 11.3 or 11.4, the Client's payment obligations shall be as per Section 11.6 above. 11.8 In the event the Client terminates the Agreement, Support Services or an Order pursuant to Sections 11.3 or 11.4, the Client must pay Guardsquare the Fees and reimbursable expenses payable in respect of any of the aforelisted up to the actual termination date. 11.9 The provisions of this Agreement that are expressly or implicitly intended to survive termination, including Sections 5, 6, 7, 8, 10, 11 (consequences of termination) and 12 (as applicable) of this Agreement, shall survive any expiration or termination of this Agreement. 12. Miscellaneous 12.1 All notices hereunder shall be in writing, addressed to the receiving Party's address as set forth below or to such other address as a Party may designate by notice hereunder, and either (i) delivered by hand, (ii) sent by overnight courier, or (iii) sent by registered mail, return receipt requested, postage prepaid: If to Guardsquare to: Depending on the Order contracting entity: - Guardsquare NV, Tervuursevest 362 b1, 3000 Leuven, Belgium; or - Guardsquare Inc., 620 Davis Street, 94111 San Francisco, CA, USA. Contact as per the relevant Order. If to the Client to: As per the relevant Order. All notices shall be deemed to have been given either (i) if by hand, at the time of actual delivery thereof to the receiving Party at such Party's address as provided above, as reasonably demonstrated by the Party serving notice, (ii) if sent by overnight courier, on the day such notice is delivered to the receiving Party at such Party's address as provided above, as reasonably demonstrated by the Party serving notice, or (iii) if sent by registered mail, three (3) days following the day such mailing is made. 12.2 The Client acknowledges that Guardsquare's performance of this Agreement is dependent on the Client's cooperation and the Client agrees to cooperate with Guardsquare to enable the latter to adequately perform its obligations under this Agreement. Such cooperation shall include (i) timely making available management decisions, information, approvals and acceptances; and (ii) at no cost to Guardsquare, providing timely and appropriate access to Client facilities, personnel, equipment, resources and systems, including its owned and licensed software, tools, data, databases and methodologies, and any relevant information and documentation (such information and documentation to be accurate and complete) as necessary to facilitate performance of the Agreement. 12.3 The Client agrees that it shall not, during the term of this Agreement and for a period of one year after the expiration or termination of this Agreement, without Guardsquare's prior written consent, directly or indirectly (including through its affiliates or recruitment agencies), hire or otherwise engage, in whatever capacity (including as an employee or consultant), or solicit the services of, any personnel member of Guardsquare or its affiliates, while such person is employed or engaged by Guardsquare or its affiliates and during six months after such employment or engagement ends. For the purpose of this section, \u201chire\u201d means to employ an individual as an employee or engage such individual as an independent contractor, whether on a full-time, part-time or temporary basis. The Client agrees that it shall not encourage third parties to act in a manner that would constitute a breach of this section, if such action had been performed by the Client. In case the above non-solicitation/non-hire obligations are not complied with and give rise to actual employment/engagement of Guardsquare's or its affiliates' personnel, the Client shall compensate Guardsquare by paying, upon a first request, a lump-sum amount corresponding to twelve times the gross salary/compensation each such person so hired/engaged earned with Guardsquare or its affiliates (as applicable) during the last full month such person worked for Guardsquare or its affiliates. 12.4 Any timeframe for performance specified in this Agreement or an Order shall be indicative target dates only, unless expressly stipulated to be binding milestones. 12.5 The terms and conditions of this Agreement may be modified or amended only by written agreement executed by a duly authorized representative of both Parties. The terms and conditions of this Agreement may be waived only by a written document signed by the Party entitled to the benefit of such terms or conditions. No such waiver or consent shall be deemed to be or shall constitute a waiver or consent with respect to any other terms or conditions of this Agreement, whether or not similar. Each such waiver or consent shall be effective only in the specific instance and for the purpose for which it was given, and shall not constitute a continuing waiver or consent. 12.6 The Client may not assign or transfer this Agreement (whether in whole or in part) to any third party (including without limitation its affiliates) without the prior written consent of Guardsquare. Guardsquare shall be free to transfer or assign the Agreement (whether in whole or in part). Guardsquare shall also be free to subcontract performance of this Agreement to its affiliates, to contractors and to third party service providers without having to obtain the Client's prior consent, provided that Guardsquare shall remain responsible towards the Client in respect of such subcontracted services. 12.7 In the event that any Party is prevented from performing or is unable to perform any of its non-monetary obligations under this Agreement due to any Act of God, fire, casualty, flood, earthquake, war, strike, lockout, epidemic, destruction of production facilities, riot, insurrection, material unavailability, or any other cause beyond the reasonable control of the Party invoking this section, such Party shall give prompt written notice to the other Party, its performance shall be excused, and the time for the performance shall be extended for the period of delay or inability to perform due to such occurrences (or such longer period as is reasonably required as reasonably demonstrated and substantiated by the affected Party). 12.8 This Agreement and the rights and obligations of the Parties hereunder shall be governed by and construed in accordance with the laws of Guardsquare's country/state of incorporation without giving effect to the conflict of law principles thereof. The United Nations Convention for the International Sale of Goods shall not apply to this Agreement. In case of any dispute arising in respect of this Agreement, whether during or after its term, the Parties shall first attempt to amicably settle such dispute. Where no such amicable settlement can be reached within a reasonable period from the dispute having arisen, the dispute shall be submitted to the exclusive jurisdiction of the courts of the city/state of incorporation of Guardsquare. 12.9 If a court of competent jurisdiction determines any provision, or any portion thereof, of this Agreement to be unenforceable or invalid, then such provision shall be deemed limited to the extent that such court deems it valid or enforceable and the remaining provisions of this Agreement shall nevertheless remain in full force and effect. 12.10 The Parties hereto acknowledge and agree that they have participated jointly in the negotiation and drafting of this Agreement and that in the event an ambiguity or question of intent or interpretation arises, this Agreement shall be construed as if drafted jointly by the Parties and no presumption or burden of proof shall arise favoring or disfavoring any Party by virtue of the authorship of any of the provisions of this Agreement. 12.11 This Agreement does not constitute a partnership agreement nor does it create a joint venture or agency relationship between Guardsquare and the Client. Neither Party shall take any action or make any representation to any third party that would be inconsistent with the foregoing sentence. Neither Party shall be liable for the representations, acts, or omissions of the other Party unless expressly provided otherwise under the terms of this Agreement. 12.12 No failure or delay by a Party hereto in exercising any right, power or remedy under this Agreement, and no course of dealing between the Parties hereto, shall operate as a waiver of any such right, power or remedy of the Party. No single or partial exercise of any right, power or remedy under this Agreement by a Party hereto, nor any abandonment or discontinuance of steps to enforce any such right, power or remedy, shall preclude such Party from any other or further exercise thereof or the exercise of any other right, power or remedy hereunder. The election of any remedy by a Party hereto shall not constitute a waiver of the right of such Party to pursue other available remedies, save as expressly stipulated otherwise in the Agreement. 12.13 As of the Effective Date, Guardsquare shall be entitled to reference the Client as a Guardsquare Client, in accordance with the Client's reasonable instructions (e.g. as regards use of Client logo) notified to Guardsquare in this respect. 12.14 This Agreement (including its Schedules and Orders) constitutes the entire agreement and understanding between the Parties with respect to the subject matter hereof and supersedes all prior oral or written agreements, representations or understandings between the Parties relating to the subject matter hereof. All such Schedules, as the same may be amended from time to time in accordance with the terms of this Agreement, are incorporated herein by reference and made a part hereof. The terms of this Agreement shall be deemed included in the Orders by reference. No statement, representation, warranty, covenant or agreement of any kind not expressly set forth in this Agreement or an Order shall affect, or be used to interpret, change or restrict, the express terms and conditions of this Agreement or an Order. Additional or deviating terms and conditions (such as, for example, purchase orders or other documents of the Client or third parties) are hereby expressly refused and rejected, even if Guardsquare does not refuse or reject such terms and conditions on a case by case basis.","title":"License"},{"location":"about/license.html#license-services-and-maintenance-agreement","text":"Version May 2017 This agreement (the \u201cAgreement\u201d) is concluded on the date of last signature of the Order in which it is included by reference (the \u201cEffective Date\u201d) by and between the Guardsquare group contracting entity specified in the relevant Order (\u201cGuardsquare\u201d), and the client contracting entity specified in the relevant Order (the \u201cClient\u201d). Guardsquare and the Client may individually be referred to as a \u201cParty\u201d and jointly as \u201cthe Parties\u201d.","title":"License, services and maintenance Agreement"},{"location":"about/license.html#preamble","text":"Whereas Guardsquare has developed and owns certain software and is in the business of licensing such software and providing support, maintenance and other professional services in connection with such software; Whereas the Client wishes to obtain from Guardsquare the right to use such software and to be provided with support and other services in connection with such software; Whereas Guardsquare is willing to license such software to the Client and to provide the Client with maintenance and support services and other professional services in connection with such software as set forth in this Agreement. NOW THEREFORE, the Parties hereby agree as follows:","title":"PREAMBLE"},{"location":"about/license.html#1-definitions","text":"1.1 When used in this Agreement, the following terms shall have the meaning ascribed to them below: \u201cAcceptance Date\u201d means the date on which the Licensed Products or Deliverables (as applicable) are agreed by the Client to conform to the relevant Specifications; \u201cApplications\u201d means the (number of) applications as specified in an Order. An Application, published by the Client, may be used by several Client end users in which case the code, assets and libraries of the Application will be identical for each end user; \u201cConfidential Information\u201d of a Party means the information of such Party, whether in written, oral, electronic or other form, which (i) is explicitly marked as confidential or proprietary, or (ii) should reasonably be considered confidential given its nature or the circumstances surrounding its disclosure, regardless of whether or not it is expressly marked as confidential, including (without being limitative) information and facts concerning a Party's and its affiliates' business plans, clients, prospects, personnel, suppliers, licensors, licensees, partners, investors, affiliates or others, training methods and materials, financial information, marketing plans, sales prospects, client lists, inventions, program devices, discoveries, ideas, concepts, know-how, techniques, formulas, blueprints, software (in object and source code form), documentation, designs, prototypes, methods, processes, procedures, codes, and any technical or trade secrets, including all copies of any of the foregoing and any analyses, studies or reports that contain, are based on, or reflect any of the foregoing. The Confidential Information of Guardsquare shall include, without being limitative, the Software and the Documentation; \u201cCustomisations Support Fee\u201d means the fees for the Support Services in respect of software Deliverables to the extent expressly agreed (in an Order) to be included under the Support Services; \u201cDeliverable\u201d means a deliverable to be provided by Guardsquare pursuant to, and designated as such in, an Order; \u201cDelivery Date\u201d means the agreed date on which the Licensed Products are made available to the Client by Guardsquare (which may include making available for download from a secure FTP site); \u201cDocumentation\u201d means the operating manual, including a description of the functions performed by the Software, user instructions, and all other related materials (excluding marketing material and any information posted on a (Guardsquare) website), as ordinarily supplied by Guardsquare to its customers to facilitate the use of the Software; \u201cEmployee\u201d means an individual who is hired pursuant to an employment contract in exchange for a wage. Agents, distributors, advisors, consultants, freelancers, (self-employed) (sub)contractors or any other third party shall not be considered Employees for the purposes of this Agreement; \u201cFees\u201d means the License Fees, Professional Services Fees, Support Fees, and fees in respect of General Support, and any other amounts payable by the Client to Guardsquare pursuant to this Agreement, as set out in an Order or as otherwise agreed in writing between duly authorized representatives of the Parties; \u201cGeneral Support\u201d means any support and maintenance services requested by the Client that are not in scope of the Support Services contracted by the Client (namely Basic Support or Gold Support, as specified in the relevant Order); \u201cIntellectual Property Rights\u201d means patents, trade marks, service marks, trade secrets, copyrights, design rights, know how, Confidential Information, trade and business names, domain names, database rights, sui generis rights (including in software), rental rights and any other intellectual or industrial property or similar right throughout the world (whether registered or unregistered), including applications for registration, renewals, extensions, continuations, divisions, reissues or improvements relating to any of these rights and the right to apply for, maintain and enforce any of the preceding items; \u201cInternal Business Purposes\u201d means use of the Software for the purpose for which it is licensed (as per the terms of the Documentation, Specifications and the license terms set out in this Agreement) with respect to the licensed (number of) Applications and SDKs only, excluding (without being limitative) sublicensing, reselling, redistribution, or otherwise commercializing or making the Software available to third parties (whether or not at a charge), and use of the Software with respect to applications or libraries other than the Applications and SDKs or with respect to Applications or SDKs that are not published by the Client; \u201cLicense Fees\u201d means the annually recurring fees payable by the Client in respect of the user rights in respect of the Licensed Products granted hereunder, which License Fees also include \u2018Basic Support\u2019 Support Services; \u201cLicense Parameters\u201d means the parameters defining and restricting the scope of the Software user rights granted pursuant to Section 2 of this Agreement, as specified in an Order and/or invoices issued by Guardsquare. License Parameters may include (non-exhaustive list) the (number of) Applications and SDKs, App Package names, Application names, SDK/library names, territorial restrictions, industry sector restrictions, number of Client end users and developers; \u201cLicensed Products\u201d means the Software and the Documentation; \u201cObject Code\u201d (or Bytecode) means software assembled or compiled in magnetic or electronic binary form on software media that is readable and usable by machines but not generally readable by humans without reverse assembly, reverse compiling or reverse engineering; \u201cOrder\u201d means an order entered into between the Parties pursuant to this Agreement, for the purchasing of Software licenses by the Client and the delivery of Support Services and/or Professional Services by Guardsquare to the Client; \u201cApp Package Name\u201d means the unique identifier of an Application (e.g. as per the app/build.gradle file), which is also unique in the Google Play store; \u201cProfessional Services\u201d means Software development, implementation and integration services, training, reviewing and testing services, or such other services in relation to the Software as may be agreed between the Parties from time to time, in an Order (but excluding Support Services).; \u201cProfessional Services Fees\u201d means the Fees payable by the Client in respect of the Professional Services and Deliverables, as set out in the relevant Order; \u201cSchedule\u201d means a schedule to this Agreement, if any; \u201cSDK\u201d means the (number of) libraries as specified in an Order. An SDK, published by the Client, may be used by several Client end users in which case the code, assets and libraries of the SDK will be identical for each end user; \u201cSoftware\u201d means the software listed in an Order, licensed to the Client by Guardsquare in accordance with the terms of this Agreement; \u201cSource Code\u201d means the Software written in programming languages including all comments and procedural code such as job control language statements, in a form intelligible to programmers trained in and knowledgeable of the Software, and capable of being translated into the Object Code form of the Software for operation on computer equipment through assembly or compiling; \u201cSpecifications\u201d means the specifications for the Software or Deliverables, as applicable, as expressly agreed in writing between the Parties; \u201cSupport Fees\u201d means the fees for the Support Services in respect of the Software. Support Fees payable in respect of the \u2018Basic Support\u2019 Support Services are included in the License Fees. \u2018Gold Support\u2019 Support Services shall be charged at an additional fee, as per the terms of the relevant Order; \u201cSupport Services\u201d means \u2018Basic Support\u2019 or \u2018Gold Support\u2019, as specified in Section 4 of this Agreement; \u201cWorking Day\u201d means any day except Saturday, Sunday or an official holiday in Guardsquare's or the Client's country of incorporation, as applicable. 1.2 In this Agreement (unless the context requires otherwise): a) Words importing the singular include the plural, words importing a particular gender include the other gender and words importing persons include bodies corporate and incorporate; and each case vice versa; b) The headings and captions contained in this Agreement are for convenience only and shall not affect the meaning, construction or interpretation of this Agreement or of any of its terms or provisions; c) Whenever the word \u201cinclude(s)\u201d or \u201cincluding\u201d is used in this Agreement, the enumeration that follows shall be deemed to be non-exhaustive. 1.3 In the event of a conflict between the terms of the Agreement and a Schedule, the latter shall prevail (unless expressly stipulated otherwise in the relevant Schedule).","title":"1. Definitions"},{"location":"about/license.html#2-license","text":"2.1 Subject to the terms and conditions of this Agreement and timely payment of the License Fees by the Client, Guardsquare hereby grants to the Client a personal, restricted, non-exclusive, non-transferable, non-assignable license, without the right to sublicense, for the term specified in the relevant Order, to use the Licensed Products in accordance with the Documentation, in Object Code form only, exclusively in combination with the licensed (number of) Applications and SDKs and in accordance with the License Parameters, for the Client's Internal Business Purposes. The license shall commence on the Delivery Date of the Licensed Products, and shall continue unless and until terminated in accordance with the terms of this Agreement and the relevant Order. 2.2 The extent of the license granted under this Section 2.1 is restricted to the scope expressly set forth herein, and there are no implied licenses under this Agreement. Guardsquare reserves any right in or to the Licensed Products not expressly granted to the Client hereunder. The Client acknowledges and agrees that any use of the Licensed Products outside the scope of the license granted under Section 2.1., unless such use has been expressly approved in writing by a Guardsquare duly authorized representative, will entitle Guardsquare to immediately terminate (or alternatively, at Guardsquare's option, suspend) the license granted hereunder and/or the Agreement for material breach by Client, without any formalities being required and without prejudice to any other right or remedy available to Guardsquare pursuant to this Agreement or under applicable law. 2.3 The Client may not provide access to the Software or the Documentation to any third party other than its Employees who need such access in connection with the performance of their responsibilities to the Client, subject always to the license terms set forth in this Agreement, and who have committed in writing to confidentiality provisions at least as stringent as those set forth herein. Guardsquare shall provide the Client with one copy of the Documentation (in a format and through such means as reasonably determined by Guardsquare), which copy shall not be distributed to third parties and otherwise shall be subject to the restrictions contained in this Section 2. Additional copies of the Documentation can be made available at a charge, at the Client's reasonable request. 2.4 The Client agrees that it shall not itself, or through any affiliate, agent, (sub)contractor or other third party: (i) use the Software or Documentation other than for the Client's Internal Business Purposes and in connection with the Applications and SDKs; (ii) sell, lease, commercialize, rent, display, license, sublicense, transfer, provide, disclose, or otherwise make available to, or permit the use of or access to, the Software or the Documentation, in whole or in part, to any third party, whether or not related to the Client, except as expressly permitted in this Agreement; (iii) modify the Software or Documentation or develop any derivative works based on the Software, Documentation or any Confidential Information of Guardsquare; (iv) use the Software except as expressly authorized herein; (v) decompile, disassemble, reverse engineer or attempt to reconstruct, identify or discover any Source Code, underlying ideas, underlying user interface techniques or algorithms of the Software by any means whatsoever (except to the extent such restriction is prohibited under applicable law), or disclose any of the foregoing; (vi) encumber or suffer to exist any lien or security interest on the Licensed Products; (vii) take any action that would cause the Software, the Source Code or the Documentation to be placed in the public domain; (viii) use the Software in an environment not expressly permitted under this Agreement; (ix) remove or alter any copyright or other proprietary notice on any of the Licensed Products; or (x) make any Software functionality in any way visible or accessible, or otherwise disclose it, to any third party (including Client's end users), whether on a standalone basis or embedded in the Client's products (e.g. in Client's Applications or SDKs); the Client shall take all such (technical and organizational) (security) measures, including in respect of its own products (including the Applications and SDKs) as is necessary to protect the Software against such unauthorized access or other disclosure. Upon Guardsquare's request, the Client shall provide Guardsquare with such information, certifications and access to its systems as may reasonably be requested by Guardsquare to verify compliance with the license terms and restrictions on the use of the Licensed Products as set forth herein. 2.5 The Client acknowledges and agrees that any modification or attempted modification of the Licensed Products by any party other than Guardsquare will void Guardsquare's warranties with respect to the Licensed Products and will be deemed to represent a material breach of this Agreement by the Client. 2.6 The Client shall maintain up-to-date electronic records of the number of copies of the Licensed Products in its possession and/or under its control at any given point in time and their locations and, upon Guardsquare's first request, shall forthwith provide Guardsquare with such records. 2.7 The Client shall comply with all applicable laws relating to the use of the Licensed Products. The Client acknowledges and agrees that the Licensed Products may include encryption and may, accordingly, be subject to additional export or other restrictions which the Client agrees to comply with.","title":"2. License"},{"location":"about/license.html#3-delivery-and-acceptance","text":"3.1 The Client shall deliver the Licensed Products and Deliverables to the Client on the Delivery Date. The Delivery Date shall be the Licensed Products and Deliverables (as applicable) Acceptance Date, on which the Licensed Products and Deliverables (as applicable) shall be deemed accepted by the Client for their use as permitted under this Agreement, and as of which the Software (and the software Deliverables to the extent expressly agreed to be in scope of the Support Services) shall be supported by Guardsquare as set out in Section 4 of this Agreement, subject to timely payment of the Support Fees (and Customisations Support Fees, as applicable). From the time of delivery, all risk relating to loss of or damage to the Licensed Products and Deliverables shall pass to the Client. 3.2 Upon Guardsquare's first request, the Client shall without undue delay provide Guardsquare with a duly signed Software and software Deliverable delivery acknowledgement and/or acceptance form, in a Guardsquare approved format.","title":"3. Delivery and acceptance"},{"location":"about/license.html#4-support-services","text":"4.1 Guardsquare shall provide the Client with the Support Services and/or General Support in accordance with this Section 4 and the relevant Order, provided the Client pays the applicable Support Fees (and Customisations Support Fees where applicable) and Fees for General Support as set forth in the relevant Order. The Support Services may consist of \u2018Basic Support\u2019 or \u2018Gold Support\u2019. Whether \u2018Basic Support\u2019 or \u2018Gold Support\u2019 applies shall be specified in the relevant Order. \u2018Basic Support\u2019 consists of the following*: Software updates and basic support for installing the Software in build processes (with Gradle, Maven, Ant, Eclipse) and support for resolving Software issues, such as bugs. The Basic Support response time is 3 Working Days from receipt of a duly reported support request (as per the process set out below). Support is provided by email only. \u2018Gold Support\u2019 consists of the following*: Basic Support, provided that the response time is 1 Working Day from receipt of a duly reported support request (as per the process set out below), and full, step by step project assistance for configuring and troubleshooting Software settings. Support may be provided by email or phone. In summary*: - Basic Support: bug fixes, setup assistance, response within 3 business days, support by e-mail. - Gold Support: bug fixes, setup assistance, project-specific support, configuration optimization, priority handling (response within 1 business day), support by e-mail and by phone. *as may be updated by Guardsquare from time to time Support Services cover the current version of the Software (as per Guardsquare's software versioning scheme). Bug fixing covered by the Support Services only covers defects attributable to the Software or to Guardsquare. Any onsite support is not in scope of the Support Services and, if requested by the Client, shall be additionally charged to the Client as General Support. The Client acknowledges and agrees that Guardsquare does not wish to receive any personal or other sensitive data (whether related to the Client, the Client's customers or otherwise) pursuant to this Agreement (unless expressly otherwise requested by Guardsquare for the purposes of fulfilling its obligations hereunder), and the Client undertakes to sanitise (including through anonymisation) any (personal) data submitted to Guardsquare pursuant to this Agreement. If the Client fails to meet this obligation (save where Guardsquare expressly requested to receive such data), Guardsquare cannot be held to be in breach of any data protection, information security or confidentiality obligations under the Agreement by processing such data in performing the Agreement and cannot incur any liability, liquidated damages or penalties in this respect. 4.2 Support process: The Client shall appoint one or more representatives that are authorised to request Support Services and General Support. The Client may replace its authorized representatives from time to time by prior written notice to Guardsquare (including by email to the designated email address). Whenever the Client requires Guardsquare to perform either Support Services or General Support pursuant to this Section 4, the Client shall submit a request by means of its authorised representatives. The service desk may be contacted directly by email in case of Basic Support, and by email or telephone if Gold Support. Guardsquare shall provide contact details for the service desk to the Client and shall inform the Client of any changes to those contact details. When reporting issues to the service desk, the Client will provide the necessary diagnostic information to enable Guardsquare to reproduce any reported defect and adequately address the Client support request. The service desk contact details are as follows (as may be updated from time to time by Guardsquare): Email*: support@guardsquare.com Telephone Guardsquare: +32 16 298 391 Download site: https://www.guardsquare.com","title":"4. Support Services"},{"location":"about/license.html#5-intellectual-property-rights","text":"5.1 Licensed Products. The Software (in Object Code and Source Code form) and Documentation, and all copies thereof, including any rights, title and interest (including any Intellectual Property Rights) therein, shall at all times remain the sole and exclusive property of Guardsquare and/or its licensors, and the Client shall not obtain any rights, title or interest (including any Intellectual Property Rights) therein except for the restricted user rights expressly granted hereunder. The Client hereby acknowledges that Guardsquare and its licensors shall retain all right, title and interest (including any Intellectual Property Rights) to any derivative works (in Object Code and Source Code form) of the Software and Documentation (including to any customization, enhancement, modification, improvement, update, upgrade or new release of the Software and the Documentation). In the event that, notwithstanding any prohibition thereto, the Client (or any third party acting on its behalf or under its control) modifies or creates derivative works from the Software or Documentation (collectively \u201cImprovements\u201d), Guardsquare shall automatically and irrevocably own all right, title and interest, including any Intellectual Property Rights, in and to such Improvements and the Client hereby assigns any rights (including Intellectual Property Rights) in such Improvements to Guardsquare and agrees to secure any additional confirmations, assignments and other instruments and documents as may be necessary to vest title to any such Improvements in Guardsquare as contemplated by this Section 5.1. No amount shall be payable by Guardsquare to the Client for the assignment of such rights in the Improvements as set forth herein. 5.2 Deliverables. Guardsquare shall own all rights, title and interest, including any Intellectual Property Rights, in Deliverables developed by Guardsquare pursuant to the Agreement, and subject to timely payment of the corresponding Professional Services Fees, Guardsquare shall grant the Client the right to use such Deliverables on terms identical to those contained in Section 2 of the Agreement. Subject to Guardsquare's obligation of confidentiality as set forth in the Agreement, nothing in the Agreement, its Schedules or an Order shall prevent Guardsquare from acquiring, developing, marketing, using for itself or providing to third parties deliverables that are similar or identical to the Deliverables. Notwithstanding anything to the contrary in this Agreement, its Schedules or an Order, (i) Guardsquare shall be free to use the ideas, concepts, methodologies, processes and know-how developed or learned by Guardsquare in the course of performing the Professional Services, and (ii) Guardsquare shall in any event retain all rights, title and interest (including any Intellectual Property Rights) in its Pre-existing Intellectual Property and derivative works thereof. For the purposes of this clause 5.2, Guardsquare's Pre-existing Intellectual Property includes the proprietary tools, methodologies, materials, know-how, processes, technologies, modules, components, programs, analyses, and frameworks developed or used by Guardsquare prior to the Effective Date or developed independently from this Agreement. 5.3 The Client agrees not to remove, obscure or modify in any way any Guardsquare proprietary marking, including any trademark or copyright notice, on or in the Licensed Products and Deliverables or on any Licensed Product or Deliverables media. The Client shall reproduce and incorporate such proprietary markings in any Licensed Product and Deliverable back-up and other copies. 5.4 The Client agrees to promptly notify Guardsquare if the Client becomes aware that any third party is violating or infringing Guardsquare's rights of whatever nature in any of the Licensed Products or Deliverables. Guardsquare shall have the right (at its discretion), to prosecute such violator or infringer at its expense and to retain the full amount of any sums recovered as damages. The Client agrees to provide, at Guardsquare's request and expense, all necessary cooperation to Guardsquare in the event of the commencement of any such proceedings by Guardsquare. 5.5 The Client acknowledges and agrees that in order to use the Software and/or the Deliverables, the Client may need to obtain, at the Client's expense, the right to use any third party software as communicated by Guardsquare from time to time.","title":"5. Intellectual Property Rights"},{"location":"about/license.html#6-confidentiality","text":"6.1 Each of the Parties agrees that it shall, both during the term of this Agreement and following termination or expiration of this Agreement (i) not disclose any Confidential Information of the other Party, except to those of its Employees, officers, directors, contractors and affiliates that have a demonstrable legitimate need to know such information in light of the Parties' rights and obligations hereunder, subject to each of them committing in writing to confidentiality obligations at least as stringent as those set forth herein prior to being granted access to such Confidential Information and subject to any other conditions and restrictions set out in this Agreement, and (ii) use any Confidential Information of the other Party only for the purpose of the performance of the Agreement, excluding any use for its own benefit or that of any third party, except as expressly permitted under this Agreement. 6.2 Each of the Parties shall ensure that each person to whom it provides/who otherwise receives (directly or indirectly) Confidential Information pursuant to this Agreement is made aware of and complies with the confidentiality obligations under this Agreement as if they were a party to this Agreement. Each of the Parties shall be responsible and liable towards the other Party for a breach of these confidentiality obligations by any party acting under their control or on their behalf or to whom they otherwise provided Confidential Information. 6.3 The confidentiality obligations set forth herein shall not apply in respect of information which: (i) is in the public domain at the time of disclosure or subsequently falls into the public domain through no breach of this Section 6 by the receiving Party, provided that the Client acknowledges and agrees that Confidential Information of Guardsquare shall not be deemed to be in the public domain merely because any part of said information is embodied in general disclosures or because individual features, components, or combinations thereof are now, or become, known to the public, through whatever means, including through means of the supply or commercialization of products or services based on or related to such Confidential Information; (ii) was rightfully in the receiving Party's possession, without any confidentiality restrictions attached to it, prior to receipt of such information from the disclosing Party hereunder; (iii) is rightfully and lawfully obtained from a third party which iss not under an obligation of confidentiality with respect to such information; (iv) was independently developed by the receiving Party, without access or reference to, or use of, the disclosing Party's Confidential Information; each as can be demonstrated and substantiated by the receiving Party in reasonable detail. 6.4 The Parties' confidentiality obligations as set forth herein shall survive termination of the Agreement. Upon termination of the Agreement or a disclosing Party's earlier written request, the receiving Party shall promptly return to the disclosing Party or destroy (at the disclosing Party's option) all Confidential Information of the disclosing Party in its possession or under its control.","title":"6. Confidentiality"},{"location":"about/license.html#7-fees","text":"7.1 As consideration for the Software licenses granted pursuant to an Order and for the Support Services/General Support and Professional Services, the Client agrees to pay to Guardsquare the Fees, in accordance with the invoicing schedule set forth in the relevant Order or other written agreement between the Parties. Expenses (including travel (incl. local transport and flights), accommodation and out-of-pocket expenses) incurred by Guardsquare in furtherance of this Agreement shall be charged to the Client at Guardsquare's cost, in addition to the Fees. Where reasonably possible, such expenses shall be subject to the Client's prior consent (such consent not to be unreasonably delayed or withheld) and shall be evidenced by receipts. 7.2 Undisputed invoices are due and payable by the Client within thirty (30) days from the invoice date. All payments made by the Client to Guardsquare under this Agreement shall be final and non refundable. The amount of any invoice which has not been paid within thirty (30) days from the invoice date shall automatically be subject to a late payment interest equal to 1.5% per month, which interest shall be compounded daily as of the due date until receipt of full payment by Guardsquare. In addition, the Client shall pay all costs incurred by Guardsquare as a result of the (extra)judicial enforcement of the Client's payment obligations hereunder. If the Client fails to pay any outstanding amounts by the due date, Guardsquare may also suspend its obligations and the Client's (user) rights hereunder until receipt of payment of such outstanding amounts. 7.3 All Fees payable to Guardsquare under this Agreement shall be paid without the right to set off or counterclaim. 7.4 If the Client disputes any portion of an invoice, the Client shall notify Guardsquare without undue delay and in any event within the payment term of the nature of any such dispute, the basis for the Client's dispute and the amount involved, together with any appropriate information supporting the Client's position, failure of which shall result in the invoice being deemed accepted by the Client. The undisputed portion of the invoice shall be paid as set forth herein. 7.5 Sums stated to be payable under this Agreement do not include any applicable taxes, which shall be additionally charged to and paid by the Client. All fees payable to Guardsquare under this Agreement shall be paid free and clear of all deductions and withholdings whatsoever unless the same are required by law, in which case the Client undertakes to pay Guardsquare such additional amounts as is necessary in order that the net amounts received by Guardsquare after all deductions and withholdings shall not be less than such payments would have been in the absence of such deductions or withholding. 7.6 Guardsquare may annually (starting 1 January following the Effective Date) increase the Professional Services Fees (including any agreed rate card), the License Fees and the (Customisations) Support Fees (as well as any other recurring Fee component as may exist from time to time) on the basis of the Belgian consumer price index, without any formalities being required. 7.7 The Client shall keep accurate business records of its use of the Licensed Products for as long as it is entitled to use the Licensed Products as per the terms of this Agreement. Such business records must include details of the License Parameters. The Client shall retain those records for at least three years (3) after any termination of its right to use the relevant Licensed Products. Guardsquare and/or its agents may inspect and review such business records, the Client's premises and any other information relevant to verify the Client's compliance with this Agreement upon reasonable notice (except where such notice would defeat the purpose of the audit), during normal business hours during the term of the Client's user rights hereunder and for a period of three (3) years thereafter, provided that such inspection right may not be exercised more than twice during any calendar year period, except where Guardsquare has reasonable grounds to believe the Client is acting in breach of this Agreement. If such inspection shows that the Client has underpaid the amount of Fees due to Guardsquare (without limitation, as a result of the Client using the Software in excess of the licensed License Parameters), without prejudice to any other rights and remedies available to Guardsquare hereunder, the Client shall promptly pay the amount of any such underpayment to Guardsquare together with any applicable late payment interest (as per clause 7.2 hereof). The Client and Guardsquare shall each bear their own cost related to any such review and inspection, provided that in the event of an underpayment by the Client or any other contractual breach as determined by such review and inspection, all costs related to such review and inspection shall be borne by the Client, without prejudice to any other rights and remedies available to Guardsquare hereunder.","title":"7. Fees"},{"location":"about/license.html#8-warranties","text":"8.1 Guardsquare warrants to the Client as follows: (a) Guardsquare is a corporation duly organized and validly existing under the laws of its incorporation and has all requisite power and authority to execute and deliver this Agreement and to perform its obligations hereunder. The execution, delivery and performance of this Agreement have been duly authorized by all requisite action on the part of Guardsquare and this Agreement constitutes the legal, valid and binding obligation on Guardsquare, enforceable in accordance with its terms. (b) Guardsquare shall perform the Agreement in a professional manner, using reasonable skill and care. (c) Except as expressly set forth in this Section 8, the Licensed Products, Deliverables, Professional Services and Support Services/General Support are provided \u201cas is.\u201d The express warranties set forth in this section 8 are the only warranties made by Guardsquare with respect to this Agreement. Guardsquare makes no other warranties, express or implied, including warranties of merchantability and fitness for a particular purpose. The Client shall have the sole responsibility to adequately protect and backup its data and equipment used in connection with the Software. 8.2 The Client warrants to Guardsquare as follows: (a) the Client is duly organized, validly existing and in good standing under the laws of its incorporation and has all requisite power and authority to execute and deliver this Agreement and to perform its obligations hereunder, and the execution, delivery and performance of this Agreement have been duly authorized by all requisite action on the part of the Client and this Agreement constitutes the legal, valid and binding obligation of the Client, enforceable in accordance with its terms. (b) the information provided by the Client for Guardsquare to be able to determine the License Parameters (without limitation, the (number of) Applications and SDKs, number of Client end users and developers, (number of) App Package names) and thus also the License Fees, is correct. (c) the Applications and SDKs will be published by the Client. If at any time during this Agreement, the Client notices or suspects that wrong assumptions have been made or any of these warranties prove incorrect, it shall promptly notify Guardsquare thereof in writing.","title":"8. Warranties"},{"location":"about/license.html#9-indemnification","text":"9.1 Guardsquare shall defend and indemnify the Client as specified herein against any claims brought by third parties to the extent such claim is based on an infringement of the Intellectual Property Rights of such third party by the Licensed Products and excluding any claims resulting from (i) the unauthorized use of the Licensed Products, (ii) the modification of any of the Licensed Products other than by Guardsquare, (iii) failure to use the most recent version of the Licensed Products made available to the Client, or failure to integrate or install any corrections to such Licensed Products issued by Guardsquare, if Guardsquare indicated that such update or correction was required to prevent a(n) (potential) infringement, (iv) use of the Licensed Products in combination with any non-Guardsquare products or services, or (v) the Software having been developed to the Client's design or incorporating documents, materials, ideas, data or other information, provided by or on behalf of the Client. Such indemnity obligation shall be conditional upon the following: (i) Guardsquare is given prompt written notice of any such claim; (ii) Guardsquare is granted sole control of the defense and settlement of such a claim; (iii) upon Guardsquare's request, the Client fully cooperates with Guardsquare in the defense and settlement of such a claim, at Guardsquare's expense; and (iv) the Client makes no admission as to Guardsquare's liability in respect of such a claim, nor does the Client agree to any settlement in respect of such a claim without Guardsquare's prior written consent. Provided these conditions are met, Guardsquare shall indemnify the Client for the damages and costs incurred by the Client as a result of such a claim, as awarded by a competent court of final instance or as agreed to by Guardsquare pursuant to a settlement agreement. 9.2 In the event the Licensed Products, in Guardsquare's reasonable opinion, are likely to become or become the subject of a third-party infringement claim (as per clause 9.1), Guardsquare shall have the right, at its sole option and expense, to: (i) modify the (allegedly) infringing part of the Licensed Products so that they become non-infringing while preserving equivalent functionality; (ii) obtain for the Client a license to continue using the Licensed Products in accordance with this Agreement; or (iii) terminate the relevant license and pay to the Client an amount equal to a pro rata portion of the License Fee paid to Guardsquare hereunder for that portion of the Licensed Products which is the subject of such infringement, such portion being based on a straight line depreciation over a five year term beginning on the Delivery Date of the Licensed Product at issue. 9.3 The foregoing states the entire liability and obligation of Guardsquare and the sole remedy of the Client with respect to any infringement or alleged infringement of any Intellectual Property Rights caused by the Licensed Products or any part thereof.","title":"9. Indemnification"},{"location":"about/license.html#10-limitations-on-liability","text":"10.1 To the maximum extent permitted by applicable law, Guardsquare excludes its liability (whether in contract, warranty, tort (including as a result of negligence, product liability or other theory) or otherwise) to the Client or any other person for recovery or recoupment of any investment made by the Client, its affiliates or any third parties acting on their behalf or under their control, in connection with this Agreement, and for any indirect, punitive, special or consequential damages, or damages for loss of profit, revenue, business, contracts or clients, loss or corruption of data, loss of goodwill, reputational harm, opportunity loss, loss of anticipated savings, and the cost of procuring replacement goods or services, arising out of or relating to this Agreement, even if Guardsquare has been advised of the possibility of such costs or damages arising. 10.2 Without prejudice to and without limiting Section 10.1 of this Agreement, to the maximum extent permitted under applicable law, Guardsquare's liability arising out of or in connection: a) with this Agreement (other than as covered under (b), (c) and (d) below), whether in contract, warranty, tort (including negligence, product liability or other theory), or otherwise, shall not exceed the total License Fees (excl. taxes) paid to Guardsquare by the Client under this Agreement during the twelve (12) month period preceding the date on which the applicable liability claim arose, provided that Guardsquare's aggregate liability in this respect shall not exceed the total License Fees (excl. taxes) paid under the Agreement; b) with the Support Services provided by Guardsquare to the Client under this Agreement, whether in contract, warranty, tort (including negligence, product liability or other theory), or otherwise, shall not exceed fifty (50) percent of the total License Fees (excl. taxes and expenses) paid to Guardsquare by the Client under this Agreement during the twelve (12) month period preceding the date on which the applicable liability claim arose, provided that Guardsquare's aggregate liability in this respect shall not, per contract year, exceed the total License Fees (excl. taxes and expenses) paid under the Agreement in respect of the relevant contract year; c) with General Support provided by Guardsquare to Client under this Agreement, whether in contract, warranty, tort (including negligence, product liability or other theory), or otherwise, shall not exceed the Fees for General Support (excl. taxes and expenses) paid to Guardsquare by the Client under this Agreement in respect of the General Support to which the applicable liability claim relates during the twelve (12) month period preceding the date on which the applicable liability claim arose, provided that Guardsquare's aggregate liability in this respect shall not exceed the total Fees for General Support (excl. taxes and expenses) paid under the relevant Order in respect of such General Support; d) with the Professional Services provided by Guardsquare to the Client under the Agreement, whether in contract, warranty, tort (including negligence, product liability or other theory) or otherwise, shall not exceed the total Professional Services Fees (excl. taxes and expenses) paid by the Client to Guardsquare in respect of such Professional Services under the Order to which the liability claim relates during the twelve (12) month period preceding the date on which the applicable liability claim arose, provided that Guardsquare's aggregate liability in this respect shall not exceed the total Professional Services Fees (excl. taxes and expenses) paid under such Order. 10.3 The Client agrees that Guardsquare can only be held liable as per the terms of this Section 10 to the extent damages suffered by the Client are directly and solely attributable to Guardsquare. The exclusions and limitations of liability under this Section shall operate to the benefit of Guardsquare's affiliates and subcontractors under this Agreement to the same extent such provisions operate to the benefit of Guardsquare. 10.4 The Client's exclusive remedy for any claim arising out of or in connection with this Agreement shall be for Guardsquare, upon receipt of written notice, to use reasonable efforts to cure the breach or default at its expense, and failing that, Guardsquare's liability shall be limited as set forth in this Agreement. The Client shall have a duty to mitigate damages for which Guardsquare is responsible.","title":"10.  Limitations on Liability"},{"location":"about/license.html#11-term-and-termination","text":"11.1 This Agreement shall commence on the Effective Date and shall continue for the term of the Order to which it relates. As a default (unless deviated from in the relevant Order), Orders (including any Software licenses and Support Services contracted pursuant to such an Order) are entered into for an initial one (1) year term (the \u201cInitial Term\u201d). Upon expiry of this Initial Term, the Orders shall automatically renew for successive one (1) year periods (each a \u201cRenewal Term\u201d), unless terminated by either Party on giving at least three (3) months' written notice prior to the expiry of the Initial Term or then current Renewal Term. Neither Party shall be entitled to terminate the Agreement or an Order in whole or in part for convenience save as expressly permitted herein. 11.2 Termination of the Agreement shall not automatically result in termination of any Orders, which must be separately terminated as set forth herein. Time and Material Professional Services (portions of) Orders may be terminated by the Client for convenience only if expressly so stipulated in the relevant Order, on giving such notice as specified in such Order. Fixed price Professional Services (portions of) Orders may not be terminated for convenience, failure of which shall result in the full fixed price becoming payable by the Client upon termination. 11.3 Either Party may terminate this Agreement, the Support Services (if the default relates to the Support Services) or the portion of the Order that is the subject of the default, by written notice to the other Party, if the other Party materially breaches this Agreement, the Support Services related provisions or a specific portion of such Order (as applicable) and fails to (i) cure such breach within thirty (30) days from the date of receipt of a default notice by the defaulting Party, and (ii) make substantial progress to cure such breach and implement a remedial plan that results in a cure of such breach within sixty (60) days from receipt of such default notice, provided that Guardsquare shall be entitled to terminate this Agreement (in whole or in part) (or alternatively suspend its obligations and/or the Client's user rights granted hereunder) on giving written notice in the event the Client breaches the license terms hereunder or infringes Guardsquare's Intellectual Property Rights. 11.4 Either Party may terminate this Agreement or an Order by written notice to the other Party, effective as of the date of delivery of such notice, if the other Party becomes the subject of a voluntary or involuntary bankruptcy, insolvency or similar proceeding or otherwise liquidates or ceases to do business. Consequences of termination. 11.5 Upon termination of an Order for whatever reason, the licenses granted to the Client pursuant to such Order in accordance with Section 2 of this Agreement shall automatically terminate and the Client shall return to Guardsquare all copies (in whatever form or medium) of the Licensed Products. 11.6 Upon termination for convenience by the Client of an Order or any of the Licensed Product licenses other than as expressly permitted in Section 11.1, the full License Fees for the Initial Term and then current Renewal Term (as applicable) shall remain payable by the Client. In the event the Client terminates an Order or the Support Services for convenience other than as expressly permitted in Section 11.1, the Support Fees shall remain payable by the Client for the full then-current term (Initial Term or then current Renewal Term, as applicable). In the event the Client terminates the Agreement or an Order for convenience other than as expressly permitted in Section 11.2, the full Professional Services Fees and reimbursable expenses payable in respect of such Order shall remain payable by the Client. 11.7 In the event Guardsquare terminates the Agreement, Licensed Product licenses, Support Services or an Order pursuant to Sections 11.3 or 11.4, the Client's payment obligations shall be as per Section 11.6 above. 11.8 In the event the Client terminates the Agreement, Support Services or an Order pursuant to Sections 11.3 or 11.4, the Client must pay Guardsquare the Fees and reimbursable expenses payable in respect of any of the aforelisted up to the actual termination date. 11.9 The provisions of this Agreement that are expressly or implicitly intended to survive termination, including Sections 5, 6, 7, 8, 10, 11 (consequences of termination) and 12 (as applicable) of this Agreement, shall survive any expiration or termination of this Agreement.","title":"11. Term and Termination"},{"location":"about/license.html#12-miscellaneous","text":"12.1 All notices hereunder shall be in writing, addressed to the receiving Party's address as set forth below or to such other address as a Party may designate by notice hereunder, and either (i) delivered by hand, (ii) sent by overnight courier, or (iii) sent by registered mail, return receipt requested, postage prepaid: If to Guardsquare to: Depending on the Order contracting entity: - Guardsquare NV, Tervuursevest 362 b1, 3000 Leuven, Belgium; or - Guardsquare Inc., 620 Davis Street, 94111 San Francisco, CA, USA. Contact as per the relevant Order. If to the Client to: As per the relevant Order. All notices shall be deemed to have been given either (i) if by hand, at the time of actual delivery thereof to the receiving Party at such Party's address as provided above, as reasonably demonstrated by the Party serving notice, (ii) if sent by overnight courier, on the day such notice is delivered to the receiving Party at such Party's address as provided above, as reasonably demonstrated by the Party serving notice, or (iii) if sent by registered mail, three (3) days following the day such mailing is made. 12.2 The Client acknowledges that Guardsquare's performance of this Agreement is dependent on the Client's cooperation and the Client agrees to cooperate with Guardsquare to enable the latter to adequately perform its obligations under this Agreement. Such cooperation shall include (i) timely making available management decisions, information, approvals and acceptances; and (ii) at no cost to Guardsquare, providing timely and appropriate access to Client facilities, personnel, equipment, resources and systems, including its owned and licensed software, tools, data, databases and methodologies, and any relevant information and documentation (such information and documentation to be accurate and complete) as necessary to facilitate performance of the Agreement. 12.3 The Client agrees that it shall not, during the term of this Agreement and for a period of one year after the expiration or termination of this Agreement, without Guardsquare's prior written consent, directly or indirectly (including through its affiliates or recruitment agencies), hire or otherwise engage, in whatever capacity (including as an employee or consultant), or solicit the services of, any personnel member of Guardsquare or its affiliates, while such person is employed or engaged by Guardsquare or its affiliates and during six months after such employment or engagement ends. For the purpose of this section, \u201chire\u201d means to employ an individual as an employee or engage such individual as an independent contractor, whether on a full-time, part-time or temporary basis. The Client agrees that it shall not encourage third parties to act in a manner that would constitute a breach of this section, if such action had been performed by the Client. In case the above non-solicitation/non-hire obligations are not complied with and give rise to actual employment/engagement of Guardsquare's or its affiliates' personnel, the Client shall compensate Guardsquare by paying, upon a first request, a lump-sum amount corresponding to twelve times the gross salary/compensation each such person so hired/engaged earned with Guardsquare or its affiliates (as applicable) during the last full month such person worked for Guardsquare or its affiliates. 12.4 Any timeframe for performance specified in this Agreement or an Order shall be indicative target dates only, unless expressly stipulated to be binding milestones. 12.5 The terms and conditions of this Agreement may be modified or amended only by written agreement executed by a duly authorized representative of both Parties. The terms and conditions of this Agreement may be waived only by a written document signed by the Party entitled to the benefit of such terms or conditions. No such waiver or consent shall be deemed to be or shall constitute a waiver or consent with respect to any other terms or conditions of this Agreement, whether or not similar. Each such waiver or consent shall be effective only in the specific instance and for the purpose for which it was given, and shall not constitute a continuing waiver or consent. 12.6 The Client may not assign or transfer this Agreement (whether in whole or in part) to any third party (including without limitation its affiliates) without the prior written consent of Guardsquare. Guardsquare shall be free to transfer or assign the Agreement (whether in whole or in part). Guardsquare shall also be free to subcontract performance of this Agreement to its affiliates, to contractors and to third party service providers without having to obtain the Client's prior consent, provided that Guardsquare shall remain responsible towards the Client in respect of such subcontracted services. 12.7 In the event that any Party is prevented from performing or is unable to perform any of its non-monetary obligations under this Agreement due to any Act of God, fire, casualty, flood, earthquake, war, strike, lockout, epidemic, destruction of production facilities, riot, insurrection, material unavailability, or any other cause beyond the reasonable control of the Party invoking this section, such Party shall give prompt written notice to the other Party, its performance shall be excused, and the time for the performance shall be extended for the period of delay or inability to perform due to such occurrences (or such longer period as is reasonably required as reasonably demonstrated and substantiated by the affected Party). 12.8 This Agreement and the rights and obligations of the Parties hereunder shall be governed by and construed in accordance with the laws of Guardsquare's country/state of incorporation without giving effect to the conflict of law principles thereof. The United Nations Convention for the International Sale of Goods shall not apply to this Agreement. In case of any dispute arising in respect of this Agreement, whether during or after its term, the Parties shall first attempt to amicably settle such dispute. Where no such amicable settlement can be reached within a reasonable period from the dispute having arisen, the dispute shall be submitted to the exclusive jurisdiction of the courts of the city/state of incorporation of Guardsquare. 12.9 If a court of competent jurisdiction determines any provision, or any portion thereof, of this Agreement to be unenforceable or invalid, then such provision shall be deemed limited to the extent that such court deems it valid or enforceable and the remaining provisions of this Agreement shall nevertheless remain in full force and effect. 12.10 The Parties hereto acknowledge and agree that they have participated jointly in the negotiation and drafting of this Agreement and that in the event an ambiguity or question of intent or interpretation arises, this Agreement shall be construed as if drafted jointly by the Parties and no presumption or burden of proof shall arise favoring or disfavoring any Party by virtue of the authorship of any of the provisions of this Agreement. 12.11 This Agreement does not constitute a partnership agreement nor does it create a joint venture or agency relationship between Guardsquare and the Client. Neither Party shall take any action or make any representation to any third party that would be inconsistent with the foregoing sentence. Neither Party shall be liable for the representations, acts, or omissions of the other Party unless expressly provided otherwise under the terms of this Agreement. 12.12 No failure or delay by a Party hereto in exercising any right, power or remedy under this Agreement, and no course of dealing between the Parties hereto, shall operate as a waiver of any such right, power or remedy of the Party. No single or partial exercise of any right, power or remedy under this Agreement by a Party hereto, nor any abandonment or discontinuance of steps to enforce any such right, power or remedy, shall preclude such Party from any other or further exercise thereof or the exercise of any other right, power or remedy hereunder. The election of any remedy by a Party hereto shall not constitute a waiver of the right of such Party to pursue other available remedies, save as expressly stipulated otherwise in the Agreement. 12.13 As of the Effective Date, Guardsquare shall be entitled to reference the Client as a Guardsquare Client, in accordance with the Client's reasonable instructions (e.g. as regards use of Client logo) notified to Guardsquare in this respect. 12.14 This Agreement (including its Schedules and Orders) constitutes the entire agreement and understanding between the Parties with respect to the subject matter hereof and supersedes all prior oral or written agreements, representations or understandings between the Parties relating to the subject matter hereof. All such Schedules, as the same may be amended from time to time in accordance with the terms of this Agreement, are incorporated herein by reference and made a part hereof. The terms of this Agreement shall be deemed included in the Orders by reference. No statement, representation, warranty, covenant or agreement of any kind not expressly set forth in this Agreement or an Order shall affect, or be used to interpret, change or restrict, the express terms and conditions of this Agreement or an Order. Additional or deviating terms and conditions (such as, for example, purchase orders or other documents of the Client or third parties) are hereby expressly refused and rejected, even if Guardsquare does not refuse or reject such terms and conditions on a case by case basis.","title":"12.  Miscellaneous"},{"location":"about/release-notes.html","text":"Version 1.2.10 Prevent references to non-existent __DGD_ methods from being introduced during processing. Version 1.2.09 Fixed parentheses not being preserved in for loops containing a binary in -operator during output writing. Version 1.2.08 Fixed parentheses not always being preserved on await expressions during output writing. Version 1.2.07 Fixed parentheses not being preserved on await subexpressions during output writing. Version 1.2.06 Fixed incorrect parsing of non-javascript <script> blocks in html files Version 1.2.05 Fixed parsing failure of UTF-8 BOM encoded files. Version 1.2.04 Using whitelists for configuring string encryption now properly obfuscates the matched strings. Version 1.2.03 Output log files when JSGuard is invoked from iXGuard. Version 1.2.02 Fixed incorrect parsing of some configurations in the iXGuard format. Version 1.2.01 Fixed possible FileNotFoundException when many files are processed. Version 1.2.00 Added support for ECMAScript 6. Added support for obfuscating resources and modules in ReactNative apps when used together with DexGuard. Added function encryption to hide the implementation of sensitive functions. Improved runtime performance of string decryption. Improved error handling when parsing configuration. Version 1.1.02 Fixed escaping of encrypted strings. Fixed wrongly obfuscated variables when obfuscation was disabled. Fixed wrong parenthesization of template call expressions. Version 1.1.01 Improved reporting of statistics for all processing steps. Improved performance of name obfuscation. Fixed NullPointerException in opaque predicate injection. Fixed NullPointerException in debugger obstruction. Version 1.1.00 Improved shrinking. Added configuration debugging. Version 1.0.00 Initial release of the JavaScript obfuscator.","title":"Release Notes"},{"location":"about/release-notes.html#version-1210","text":"Prevent references to non-existent __DGD_ methods from being introduced during processing.","title":"Version 1.2.10"},{"location":"about/release-notes.html#version-1209","text":"Fixed parentheses not being preserved in for loops containing a binary in -operator during output writing.","title":"Version 1.2.09"},{"location":"about/release-notes.html#version-1208","text":"Fixed parentheses not always being preserved on await expressions during output writing.","title":"Version 1.2.08"},{"location":"about/release-notes.html#version-1207","text":"Fixed parentheses not being preserved on await subexpressions during output writing.","title":"Version 1.2.07"},{"location":"about/release-notes.html#version-1206","text":"Fixed incorrect parsing of non-javascript <script> blocks in html files","title":"Version 1.2.06"},{"location":"about/release-notes.html#version-1205","text":"Fixed parsing failure of UTF-8 BOM encoded files.","title":"Version 1.2.05"},{"location":"about/release-notes.html#version-1204","text":"Using whitelists for configuring string encryption now properly obfuscates the matched strings.","title":"Version 1.2.04"},{"location":"about/release-notes.html#version-1203","text":"Output log files when JSGuard is invoked from iXGuard.","title":"Version 1.2.03"},{"location":"about/release-notes.html#version-1202","text":"Fixed incorrect parsing of some configurations in the iXGuard format.","title":"Version 1.2.02"},{"location":"about/release-notes.html#version-1201","text":"Fixed possible FileNotFoundException when many files are processed.","title":"Version 1.2.01"},{"location":"about/release-notes.html#version-1200","text":"Added support for ECMAScript 6. Added support for obfuscating resources and modules in ReactNative apps when used together with DexGuard. Added function encryption to hide the implementation of sensitive functions. Improved runtime performance of string decryption. Improved error handling when parsing configuration.","title":"Version 1.2.00"},{"location":"about/release-notes.html#version-1102","text":"Fixed escaping of encrypted strings. Fixed wrongly obfuscated variables when obfuscation was disabled. Fixed wrong parenthesization of template call expressions.","title":"Version 1.1.02"},{"location":"about/release-notes.html#version-1101","text":"Improved reporting of statistics for all processing steps. Improved performance of name obfuscation. Fixed NullPointerException in opaque predicate injection. Fixed NullPointerException in debugger obstruction.","title":"Version 1.1.01"},{"location":"about/release-notes.html#version-1100","text":"Improved shrinking. Added configuration debugging.","title":"Version 1.1.00"},{"location":"about/release-notes.html#version-1000","text":"Initial release of the JavaScript obfuscator.","title":"Version 1.0.00"},{"location":"configuration/assumptions.html","text":"Assumptions In the assumptions section, you can specify certain invariants that the JavaScript obfuscator may rely upon to better optimize, shrink and/or obfuscate JavaScript programs. False variables You can use the false-variables section to specify variables which will always be false during execution. processing: assumptions: false-variables: This may be useful to remove debug code. For example, the following code: if (DEBUG) { console.log(\"Debug output.\"); } can be completely removed if the JavaScript obfuscator knows that the DEBUG variable is always false at runtime. If the DEBUG variable is listed via a whitelist in the false-variables section: processing: assumptions: false-variables: whitelist: - DEBUG and code shrinking is enabled, the JavaScript obfuscator will effectively remove this code. Filters You can use whitelists or blacklists to specify the names of variables that will always be false. If no filter is specified, nothing will be matched. Functions without side effects You can use the no-side-effect-methods section to specify functions that have no side effects, other than possibly returning a value. processing: assumptions: no-side-effect-methods: For example, the Math.abs(x) function has no other effect than returning the absolute value of x . If code shrinking is enabled, the JavaScript obfuscator can use this to remove unused code. You can use this, for example, to remove logging statements from you programs. By adding the following section to your configuration: processing: assumptions: no-side-effect-methods: whitelist: - console.log and enabling code shrinking, all console.log() calls will be removed from your programs. Filters You can use whitelists or blacklists to specify the names of functions that have no side effects. If the no-side-effect-methods section is empty, it won't match any function.","title":"Assumptions"},{"location":"configuration/assumptions.html#assumptions","text":"In the assumptions section, you can specify certain invariants that the JavaScript obfuscator may rely upon to better optimize, shrink and/or obfuscate JavaScript programs.","title":"Assumptions"},{"location":"configuration/assumptions.html#false-variables","text":"You can use the false-variables section to specify variables which will always be false during execution. processing: assumptions: false-variables: This may be useful to remove debug code. For example, the following code: if (DEBUG) { console.log(\"Debug output.\"); } can be completely removed if the JavaScript obfuscator knows that the DEBUG variable is always false at runtime. If the DEBUG variable is listed via a whitelist in the false-variables section: processing: assumptions: false-variables: whitelist: - DEBUG and code shrinking is enabled, the JavaScript obfuscator will effectively remove this code.","title":"False variables"},{"location":"configuration/assumptions.html#filters","text":"You can use whitelists or blacklists to specify the names of variables that will always be false. If no filter is specified, nothing will be matched.","title":"Filters"},{"location":"configuration/assumptions.html#functions-without-side-effects","text":"You can use the no-side-effect-methods section to specify functions that have no side effects, other than possibly returning a value. processing: assumptions: no-side-effect-methods: For example, the Math.abs(x) function has no other effect than returning the absolute value of x . If code shrinking is enabled, the JavaScript obfuscator can use this to remove unused code. You can use this, for example, to remove logging statements from you programs. By adding the following section to your configuration: processing: assumptions: no-side-effect-methods: whitelist: - console.log and enabling code shrinking, all console.log() calls will be removed from your programs.","title":"Functions without side effects"},{"location":"configuration/assumptions.html#filters_1","text":"You can use whitelists or blacklists to specify the names of functions that have no side effects. If the no-side-effect-methods section is empty, it won't match any function.","title":"Filters"},{"location":"configuration/configuration.html","text":"Basic Configuration Options Configuring the JavaScript obfuscator is done through a YAML file that is configured in your DexGuard configuration file using the -javascriptconfiguration option. Attention Be reminded that in the YAML format, indentation has meaning (similar to e.g. the Python language). Paths Attention As DexGuard automatically takes care of inputs and outputs, it is not allowed to specify the paths block when using the JavaScript obfuscator with DexGuard. This section is therefore not relevant for that use case. Within the paths block you can configure the input and output directories. It may contain one or more subblocks. Each subblock has an inputs and outputs entry, specifying one or more input directories and exactly one output directory. The paths listed under inputs can be followed by a file name filter specified between brackets. The JavaScript obfuscator will recursively scan all input directories for all files that match the given filter and, after processing, write them to their corresponding output directory. If no file filter is specified between brackets, all files inside the input directory (and all of its subdirectories) will be processed. paths: - inputs: - myInputDir1a/(**.js) - myInputDir1b/(**.html) outputs: - myOutputDir1 - inputs: - myInputDir2 outputs: - myOutputDir2 Alternatively, single JavaScripts files can be processed individually by specifying the path to the input file under inputs and the path to the processed output file under outputs . paths: - inputs: - myInputDir/myInputFile1.js outputs: - myOutputDir/myOutputFile1.js - inputs: - myInputDir/myInputFile2.js outputs: - myOutputDir/myOutputFile2.js Output In the output block, you can specify how the processed JavaScript files should be written. output: prettify Use the prettify option to control whether the written JavaScript files should be formatted with proper indentation. Default: false output: prettify: true Tip You should only enable prettify when debugging, as it significantly increases program size and makes code more readable. encoding Use the encoding option to specify in which encoding the JavaScript files will be written. The possible encodings are the ones specified by the java.nio.charset.Charset class. Default: \"UTF-8\" output: encoding: \"UTF-16\" escape-strings This option escapes all non-ASCII characters in strings, writing them out in their hexadecimal representation instead. Use this when your deployment target does not handle non-ASCII characters correctly. Default: false output: escape-strings: true Original program : translations = { \"Hello, world!\": \"\u4f60\u597d, \u4e16\u754c!\" } Processed program : translations = { \"Hello, world!\": \"\\u4F60\\u597D, \\u4E16\\u754C!\" } Processing The processing block defines all transformations to be applied to the processed JavaScript programs. processing: The processing block and each of its sub-blocks can define a set of filters. The filters documentation provides more details on how filters work. Assumptions The assumptions sections defines a set of assumptions that the JavaScript obfuscator may rely upon to perform its shrinking and obfuscation. See the assumptions documentation for more details. processing: assumptions: Shrinking Shrinking removes code that will never be executed (because it is not called from any other active code). See the shrinking documentation for more details. processing: shrinking: Protection The protection block defines all obfuscation techniques and integrity protections to be applied to the processed JavaScript programs. processing: protection: See the pages of the individual features for more details: String Encryption String Array Conversion Name Obfuscation Number Obfuscation Arithmetic Obfuscation Control Flow Obfuscation Property Access Obfuscation Shuffling Debugger Obstruction Processing HTML files By default, HTML files that are specified as inputs are left untouched. The JavaScript contained in these HTML files will still be used to automatically blacklist global variables declared in the embedded JavaScript. The JavaScript that is embedded in HTML files can also be processed by explicitly enabling process-html : processing: process-html: true The JavaScript obfuscator will now apply all configured obfuscation techniques to the JavaScript inside the HTML files that are specified as inputs . Configuration Debugging The configuration-debugging flag enables printing blacklist suggestions to the console at runtime, both for shrinking and name obfuscation . processing: configuration-debugging: true Example output: Shrunk property eventTitle has been accessed. Blacklist this property (under shrinking > properties): - eventTitle Corresponding configuration: processing: shrinking: properties: blacklist: - eventTitle Attention This option will include debug information in your application. Never use it in release builds.","title":"Basic Configuration Options"},{"location":"configuration/configuration.html#basic-configuration-options","text":"Configuring the JavaScript obfuscator is done through a YAML file that is configured in your DexGuard configuration file using the -javascriptconfiguration option. Attention Be reminded that in the YAML format, indentation has meaning (similar to e.g. the Python language).","title":"Basic Configuration Options"},{"location":"configuration/configuration.html#paths","text":"Attention As DexGuard automatically takes care of inputs and outputs, it is not allowed to specify the paths block when using the JavaScript obfuscator with DexGuard. This section is therefore not relevant for that use case. Within the paths block you can configure the input and output directories. It may contain one or more subblocks. Each subblock has an inputs and outputs entry, specifying one or more input directories and exactly one output directory. The paths listed under inputs can be followed by a file name filter specified between brackets. The JavaScript obfuscator will recursively scan all input directories for all files that match the given filter and, after processing, write them to their corresponding output directory. If no file filter is specified between brackets, all files inside the input directory (and all of its subdirectories) will be processed. paths: - inputs: - myInputDir1a/(**.js) - myInputDir1b/(**.html) outputs: - myOutputDir1 - inputs: - myInputDir2 outputs: - myOutputDir2 Alternatively, single JavaScripts files can be processed individually by specifying the path to the input file under inputs and the path to the processed output file under outputs . paths: - inputs: - myInputDir/myInputFile1.js outputs: - myOutputDir/myOutputFile1.js - inputs: - myInputDir/myInputFile2.js outputs: - myOutputDir/myOutputFile2.js","title":"Paths"},{"location":"configuration/configuration.html#output","text":"In the output block, you can specify how the processed JavaScript files should be written. output:","title":"Output"},{"location":"configuration/configuration.html#prettify","text":"Use the prettify option to control whether the written JavaScript files should be formatted with proper indentation. Default: false output: prettify: true Tip You should only enable prettify when debugging, as it significantly increases program size and makes code more readable.","title":"prettify"},{"location":"configuration/configuration.html#encoding","text":"Use the encoding option to specify in which encoding the JavaScript files will be written. The possible encodings are the ones specified by the java.nio.charset.Charset class. Default: \"UTF-8\" output: encoding: \"UTF-16\"","title":"encoding"},{"location":"configuration/configuration.html#escape-strings","text":"This option escapes all non-ASCII characters in strings, writing them out in their hexadecimal representation instead. Use this when your deployment target does not handle non-ASCII characters correctly. Default: false output: escape-strings: true Original program : translations = { \"Hello, world!\": \"\u4f60\u597d, \u4e16\u754c!\" } Processed program : translations = { \"Hello, world!\": \"\\u4F60\\u597D, \\u4E16\\u754C!\" }","title":"escape-strings"},{"location":"configuration/configuration.html#processing","text":"The processing block defines all transformations to be applied to the processed JavaScript programs. processing: The processing block and each of its sub-blocks can define a set of filters. The filters documentation provides more details on how filters work.","title":"Processing"},{"location":"configuration/configuration.html#assumptions","text":"The assumptions sections defines a set of assumptions that the JavaScript obfuscator may rely upon to perform its shrinking and obfuscation. See the assumptions documentation for more details. processing: assumptions:","title":"Assumptions"},{"location":"configuration/configuration.html#shrinking","text":"Shrinking removes code that will never be executed (because it is not called from any other active code). See the shrinking documentation for more details. processing: shrinking:","title":"Shrinking"},{"location":"configuration/configuration.html#protection","text":"The protection block defines all obfuscation techniques and integrity protections to be applied to the processed JavaScript programs. processing: protection: See the pages of the individual features for more details: String Encryption String Array Conversion Name Obfuscation Number Obfuscation Arithmetic Obfuscation Control Flow Obfuscation Property Access Obfuscation Shuffling Debugger Obstruction","title":"Protection"},{"location":"configuration/configuration.html#processing-html-files","text":"By default, HTML files that are specified as inputs are left untouched. The JavaScript contained in these HTML files will still be used to automatically blacklist global variables declared in the embedded JavaScript. The JavaScript that is embedded in HTML files can also be processed by explicitly enabling process-html : processing: process-html: true The JavaScript obfuscator will now apply all configured obfuscation techniques to the JavaScript inside the HTML files that are specified as inputs .","title":"Processing HTML files"},{"location":"configuration/configuration.html#configuration-debugging","text":"The configuration-debugging flag enables printing blacklist suggestions to the console at runtime, both for shrinking and name obfuscation . processing: configuration-debugging: true Example output: Shrunk property eventTitle has been accessed. Blacklist this property (under shrinking > properties): - eventTitle Corresponding configuration: processing: shrinking: properties: blacklist: - eventTitle Attention This option will include debug information in your application. Never use it in release builds.","title":"Configuration Debugging"},{"location":"configuration/filters.html","text":"Filters Filters allow you to specify which parts of your code should (not) be handled by a feature. There are two type of filters: When specifying a whitelist , all entities matching the filter are processed. When specifying a blacklist , all entities not matching the filter are processed. Additionally, filters can be either structured or unstructured . The following sections explain the difference and how these filters are used and combined. Basics Unstructured Filters An unstructured filter is the simplest form of a whitelist or blacklist. It is merely a list of strings specified in YAML format. The example below shows a whitelist that matches the words foo and bar . whitelist: - 'foo' - 'bar' An entity matches a filter if it matches at least one entry in the filter. Filter Semantics The semantics of a filter (what the filter is matched against) depend on the feature specifics. For example, in case of string encryption, an unstructured filter is matched against the string values, whereas in property access obfuscation, the filter is matched against the property names. For the exact semantics please refer to the documentation of the individual features. Structured Filters Structured filters are filters that impose a certain structure, matching the structure of JavaScript programs. Currently, only functions can be matched against these filters. The example below shows a filter matching all functions with name myFunction . structured-whitelist: functions: - 'myFunction' If a function matches a structured filter, all applicable entities contained within the function will be processed. For example, in case of string encryption, the above filter would encrypt all strings within functions with name 'myFunction'. For the exact semantics please refer to the documentation of the individual features. Default behavior If a feature is enabled but no filter is specified, all applicable entities will be processed. If a filter is specified but empty, the filter will be applied as if nothing matches. In the following example, all strings in the processed program will be encrypted: processing: protection: data: strings: encrypt: With an empty whitelist, none of the strings will be encrypted: processing: protection: data: strings: encrypt: whitelist: On the other hand, with an empty blacklist, all strings will be encrypted: processing: protection: data: strings: encrypt: blacklist: Regular Expressions Both structured and unstructured filters support regular expressions. They are convenient to concisely mark a range of entities. The syntax should follow the regular expression grammar of DexGuard. Filters With Configuration Levels Some features have configuration levels rather than individual options you can turn on or off. The possible configuration levels are listed below. min low medium high max A structured and/or unstructured whitelist can be provided for each configuration level. In the following example, all functions starting with foo are processed with medium configuration level, all function ending with bar with high configuration level: levels: - level: medium structured-whitelist: functions: - 'foo*' - level: high structured-whitelist: functions: - '*bar' Attention If a conflict occurs across configuration levels, the configuration with the highest level applies. In the example above, the instance method named 'foobar' will be processed with the high configuration. Combining filters Combining whitelists and blacklists If both a whitelist and a blacklist are present, an entity is processed only if it matches the whitelist and doesn't match the blacklist. In the following string encryption filter example: whitelist: - 'foo*' blacklist: - '*bar' 'Hello, world' won't be encrypted. 'foofoo' will be encrypted. 'barbar' won't be encrypted. 'foobar' won't be encrypted. Combining structured and unstructured filters If both a structured and unstructured whitelist are present, an entity is processed if it matches either the structured or the unstructured whitelist. Similarly, an entity matches a blacklist if it matches either the structured or the unstructured blacklist. If you combine whitelists and blacklists, an entity is processed only if: it matches either the structured or the unstructured whitelist, and it matches neither the structured nor the unstructured blacklist. In the following string encryption filter example: whitelist: - 'foo*' structured-whitelist: functions: - 'hello*' structured-blacklist: functions: - 'helloWorld' All strings starting with foo are encrypted, as well as all strings in functions that start with hello , except for all strings (even strings starting with foo ) in functions with name 'helloWorld'. Combining filters at different levels You can specify filters at different levels, for example, on both the protection block and control-flow subblock. An entity is processed by a feature only if it matches the filter of the feature itself and the filters of all parent blocks. Filters on parent blocks may be interpreted differently for each of the features they contain. For example, a whitelist on the protection block will be matched against string values during string encryption, whereas the same whitelist will be matched against property names during property access obfuscation. You will typically use filters on parent blocks to exclude parts of your program from any shrinking or obfuscation. In the following example, we want to exclude the function foobar from any protection: processing: protection: structured-blacklist: - functions: - 'foobar' code: names: whitelist: - 'foo*' control-flow: structured-whitelist: functions: - '*bar' All names starting with foo will be name obfuscated, except functions named foobar . Control flow obfuscation is applied within all functions that end with bar , except for functions named foobar . Also note that, because the processing and code block have no filter specified, they behave as if they have a filter that would match everything. Complexity of filters If many filters are being combined, especially when mixing the different filter types (whitelists/blacklist, structured/unstructured, feature/parent level), the interpretation of the filters can become complex. Therefore, as a general rule, try to keep your filter rules as simple as possible.","title":"Filters"},{"location":"configuration/filters.html#filters","text":"Filters allow you to specify which parts of your code should (not) be handled by a feature. There are two type of filters: When specifying a whitelist , all entities matching the filter are processed. When specifying a blacklist , all entities not matching the filter are processed. Additionally, filters can be either structured or unstructured . The following sections explain the difference and how these filters are used and combined.","title":"Filters"},{"location":"configuration/filters.html#basics","text":"","title":"Basics"},{"location":"configuration/filters.html#unstructured-filters","text":"An unstructured filter is the simplest form of a whitelist or blacklist. It is merely a list of strings specified in YAML format. The example below shows a whitelist that matches the words foo and bar . whitelist: - 'foo' - 'bar' An entity matches a filter if it matches at least one entry in the filter. Filter Semantics The semantics of a filter (what the filter is matched against) depend on the feature specifics. For example, in case of string encryption, an unstructured filter is matched against the string values, whereas in property access obfuscation, the filter is matched against the property names. For the exact semantics please refer to the documentation of the individual features.","title":"Unstructured Filters"},{"location":"configuration/filters.html#structured-filters","text":"Structured filters are filters that impose a certain structure, matching the structure of JavaScript programs. Currently, only functions can be matched against these filters. The example below shows a filter matching all functions with name myFunction . structured-whitelist: functions: - 'myFunction' If a function matches a structured filter, all applicable entities contained within the function will be processed. For example, in case of string encryption, the above filter would encrypt all strings within functions with name 'myFunction'. For the exact semantics please refer to the documentation of the individual features.","title":"Structured Filters"},{"location":"configuration/filters.html#default-behavior","text":"If a feature is enabled but no filter is specified, all applicable entities will be processed. If a filter is specified but empty, the filter will be applied as if nothing matches. In the following example, all strings in the processed program will be encrypted: processing: protection: data: strings: encrypt: With an empty whitelist, none of the strings will be encrypted: processing: protection: data: strings: encrypt: whitelist: On the other hand, with an empty blacklist, all strings will be encrypted: processing: protection: data: strings: encrypt: blacklist:","title":"Default behavior"},{"location":"configuration/filters.html#regular-expressions","text":"Both structured and unstructured filters support regular expressions. They are convenient to concisely mark a range of entities. The syntax should follow the regular expression grammar of DexGuard.","title":"Regular Expressions"},{"location":"configuration/filters.html#filters-with-configuration-levels","text":"Some features have configuration levels rather than individual options you can turn on or off. The possible configuration levels are listed below. min low medium high max A structured and/or unstructured whitelist can be provided for each configuration level. In the following example, all functions starting with foo are processed with medium configuration level, all function ending with bar with high configuration level: levels: - level: medium structured-whitelist: functions: - 'foo*' - level: high structured-whitelist: functions: - '*bar' Attention If a conflict occurs across configuration levels, the configuration with the highest level applies. In the example above, the instance method named 'foobar' will be processed with the high configuration.","title":"Filters With Configuration Levels"},{"location":"configuration/filters.html#combining-filters","text":"","title":"Combining filters"},{"location":"configuration/filters.html#combining-whitelists-and-blacklists","text":"If both a whitelist and a blacklist are present, an entity is processed only if it matches the whitelist and doesn't match the blacklist. In the following string encryption filter example: whitelist: - 'foo*' blacklist: - '*bar' 'Hello, world' won't be encrypted. 'foofoo' will be encrypted. 'barbar' won't be encrypted. 'foobar' won't be encrypted.","title":"Combining whitelists and blacklists"},{"location":"configuration/filters.html#combining-structured-and-unstructured-filters","text":"If both a structured and unstructured whitelist are present, an entity is processed if it matches either the structured or the unstructured whitelist. Similarly, an entity matches a blacklist if it matches either the structured or the unstructured blacklist. If you combine whitelists and blacklists, an entity is processed only if: it matches either the structured or the unstructured whitelist, and it matches neither the structured nor the unstructured blacklist. In the following string encryption filter example: whitelist: - 'foo*' structured-whitelist: functions: - 'hello*' structured-blacklist: functions: - 'helloWorld' All strings starting with foo are encrypted, as well as all strings in functions that start with hello , except for all strings (even strings starting with foo ) in functions with name 'helloWorld'.","title":"Combining structured and unstructured filters"},{"location":"configuration/filters.html#combining-filters-at-different-levels","text":"You can specify filters at different levels, for example, on both the protection block and control-flow subblock. An entity is processed by a feature only if it matches the filter of the feature itself and the filters of all parent blocks. Filters on parent blocks may be interpreted differently for each of the features they contain. For example, a whitelist on the protection block will be matched against string values during string encryption, whereas the same whitelist will be matched against property names during property access obfuscation. You will typically use filters on parent blocks to exclude parts of your program from any shrinking or obfuscation. In the following example, we want to exclude the function foobar from any protection: processing: protection: structured-blacklist: - functions: - 'foobar' code: names: whitelist: - 'foo*' control-flow: structured-whitelist: functions: - '*bar' All names starting with foo will be name obfuscated, except functions named foobar . Control flow obfuscation is applied within all functions that end with bar , except for functions named foobar . Also note that, because the processing and code block have no filter specified, they behave as if they have a filter that would match everything. Complexity of filters If many filters are being combined, especially when mixing the different filter types (whitelists/blacklist, structured/unstructured, feature/parent level), the interpretation of the filters can become complex. Therefore, as a general rule, try to keep your filter rules as simple as possible.","title":"Combining filters at different levels"},{"location":"features/arithmeticobfuscation.html","text":"Arithmetic Obfuscation Arithmetic obfuscation transforms arithmetic expressions into semantically equivalent but more complex expressions. The goal of this operation is to make it harder for hackers to read and interpret these expressions. Example Original program : var x = 12 + 34; Processed program : var a02 = ((12 ^ 34) + 2 * (12 & 34)); Characteristics Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection low Arithmetic obfuscation makes it slightly more difficult for hackers to read code, but doesn't prevent them from eventually understanding the code. Resilience low Hackers may reverse arithmetic obfuscation using dynamic program analysis. Code size low/medium Arithmetic obfuscation may somewhat expand the program size, depending on the chosen obfuscation level. Performance low Arithmetic obfuscation adds a small computational overhead due to the expanded expressions. It may be necessary to exclude performance-critical functions using filters . Configuration Arithmetic obfuscation is part of the code subsection of the protection section. The following configuration enables arithmetic obfuscation and, without additional settings or filters, applies the medium obfuscation level to all functions: processing: protection: code: arithmetic-operations: Tip When the feature is not listed in the configuration, it is disabled. Setting:enabled When enabled is unspecified or set to true , arithmetic obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true arithmetic-operations: enabled: true Filters Use filters with configuration levels to specify in which functions to add arithmetic obfuscation. Arithmetic obfuscation applies the same techniques for all configuration levels, but in varying amounts. Lower levels will modify fewer lines of code, higher levels will modify more lines of code. Filter Effect structured-whitelist, structured-blacklist Apply arithmetic obfuscation to all matching functions. Default: when arithmetic obfuscation is enabled but no filters are specified, the medium configuration level is applied to all functions. arithmetic-operations: levels: ... Verification Look in the obfuscated code for arithmetic expressions; some of them should have been replaced with semantically equivalent but more complex expressions.","title":"Arithmetic Obfuscation"},{"location":"features/arithmeticobfuscation.html#arithmetic-obfuscation","text":"Arithmetic obfuscation transforms arithmetic expressions into semantically equivalent but more complex expressions. The goal of this operation is to make it harder for hackers to read and interpret these expressions.","title":"Arithmetic Obfuscation"},{"location":"features/arithmeticobfuscation.html#example","text":"Original program : var x = 12 + 34; Processed program : var a02 = ((12 ^ 34) + 2 * (12 & 34));","title":"Example"},{"location":"features/arithmeticobfuscation.html#characteristics","text":"Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection low Arithmetic obfuscation makes it slightly more difficult for hackers to read code, but doesn't prevent them from eventually understanding the code. Resilience low Hackers may reverse arithmetic obfuscation using dynamic program analysis. Code size low/medium Arithmetic obfuscation may somewhat expand the program size, depending on the chosen obfuscation level. Performance low Arithmetic obfuscation adds a small computational overhead due to the expanded expressions. It may be necessary to exclude performance-critical functions using filters .","title":"Characteristics"},{"location":"features/arithmeticobfuscation.html#configuration","text":"Arithmetic obfuscation is part of the code subsection of the protection section. The following configuration enables arithmetic obfuscation and, without additional settings or filters, applies the medium obfuscation level to all functions: processing: protection: code: arithmetic-operations: Tip When the feature is not listed in the configuration, it is disabled.","title":"Configuration"},{"location":"features/arithmeticobfuscation.html#settingenabled","text":"When enabled is unspecified or set to true , arithmetic obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true arithmetic-operations: enabled: true","title":"Setting:enabled"},{"location":"features/arithmeticobfuscation.html#filters","text":"Use filters with configuration levels to specify in which functions to add arithmetic obfuscation. Arithmetic obfuscation applies the same techniques for all configuration levels, but in varying amounts. Lower levels will modify fewer lines of code, higher levels will modify more lines of code. Filter Effect structured-whitelist, structured-blacklist Apply arithmetic obfuscation to all matching functions. Default: when arithmetic obfuscation is enabled but no filters are specified, the medium configuration level is applied to all functions. arithmetic-operations: levels: ...","title":"Filters"},{"location":"features/arithmeticobfuscation.html#verification","text":"Look in the obfuscated code for arithmetic expressions; some of them should have been replaced with semantically equivalent but more complex expressions.","title":"Verification"},{"location":"features/controlflowobfuscation.html","text":"Control Flow Obfuscation Control flow obfuscation adds complexity to the application logic flow without changing the semantics. The resulting code will no longer confirm to the patterns found in the original application, making it harder to understand the purpose of the code. Example Original program : x = y + z + 2; Processed program : var a = 1; if(!a && undefined) { x = y + z + 4; } else { x = a ? (y + z + 2) : (y * z - 2); } Characteristics Characteristic Impact Explanation Effort medium You can enable/disable this feature with a simple configuration flag. It may require some filtering if the program code expands too much, or if performance-critical functions are affected by the obfuscation. Protection medium Control flow obfuscation raises the bar for hackers to read code, but doesn't prevent them from eventually understanding the code. Resilience medium The control flow obfuscation techniques that are used may still be reverted by careful analysis of the program logic. Code size medium/high Control flow obfuscation inject redundant dead code blocks into the code. When applied on large parts of the program and with a high obfuscation level, the code will grow significantly. Performance medium Control flow obfuscation adds computational overhead due to opaque predicates that are injected in the code. It may be necessary to exclude performance-critical functions using filters . Configuration Control flow obfuscation is part of the code subsection of the protection section. The following configuration enables control flow obfuscation and, without additional settings or filters, applies the medium obfuscation level to all functions: processing: protection: code: control-flow: Tip When the feature is not listed in the configuration, it is disabled. Setting: enabled When enabled is unspecified or set to true , control flow obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true control-flow: enabled: true Filters Use filters with configuration levels to specify in which functions to add control flow obfuscation. Control flow obfuscation applies the same techniques for all configuration levels, but in varying amounts. Lower levels will modify fewer lines of code, higher levels will modify more lines of code. Filter Effect structured-whitelist, structured-blacklist Apply control flow obfuscation to all matching functions. Default: when control flow obfuscation is enabled but no filters are specified, the medium configuration level is applied to all functions. control-flow: levels: ... Verification Look in the obfuscated code for slightly modified (corrupted) copies of the original code.","title":"Control Flow Obfuscation"},{"location":"features/controlflowobfuscation.html#control-flow-obfuscation","text":"Control flow obfuscation adds complexity to the application logic flow without changing the semantics. The resulting code will no longer confirm to the patterns found in the original application, making it harder to understand the purpose of the code.","title":"Control Flow Obfuscation"},{"location":"features/controlflowobfuscation.html#example","text":"Original program : x = y + z + 2; Processed program : var a = 1; if(!a && undefined) { x = y + z + 4; } else { x = a ? (y + z + 2) : (y * z - 2); }","title":"Example"},{"location":"features/controlflowobfuscation.html#characteristics","text":"Characteristic Impact Explanation Effort medium You can enable/disable this feature with a simple configuration flag. It may require some filtering if the program code expands too much, or if performance-critical functions are affected by the obfuscation. Protection medium Control flow obfuscation raises the bar for hackers to read code, but doesn't prevent them from eventually understanding the code. Resilience medium The control flow obfuscation techniques that are used may still be reverted by careful analysis of the program logic. Code size medium/high Control flow obfuscation inject redundant dead code blocks into the code. When applied on large parts of the program and with a high obfuscation level, the code will grow significantly. Performance medium Control flow obfuscation adds computational overhead due to opaque predicates that are injected in the code. It may be necessary to exclude performance-critical functions using filters .","title":"Characteristics"},{"location":"features/controlflowobfuscation.html#configuration","text":"Control flow obfuscation is part of the code subsection of the protection section. The following configuration enables control flow obfuscation and, without additional settings or filters, applies the medium obfuscation level to all functions: processing: protection: code: control-flow: Tip When the feature is not listed in the configuration, it is disabled.","title":"Configuration"},{"location":"features/controlflowobfuscation.html#setting-enabled","text":"When enabled is unspecified or set to true , control flow obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true control-flow: enabled: true","title":"Setting: enabled"},{"location":"features/controlflowobfuscation.html#filters","text":"Use filters with configuration levels to specify in which functions to add control flow obfuscation. Control flow obfuscation applies the same techniques for all configuration levels, but in varying amounts. Lower levels will modify fewer lines of code, higher levels will modify more lines of code. Filter Effect structured-whitelist, structured-blacklist Apply control flow obfuscation to all matching functions. Default: when control flow obfuscation is enabled but no filters are specified, the medium configuration level is applied to all functions. control-flow: levels: ...","title":"Filters"},{"location":"features/controlflowobfuscation.html#verification","text":"Look in the obfuscated code for slightly modified (corrupted) copies of the original code.","title":"Verification"},{"location":"features/debuggerobstruction.html","text":"Debugger Obstruction Debugger obstruction makes it harder to execute program code when a debugger is active. It does so by randomly injecting debugger statements in the program code. The program execution will pause at each of the injected statements when the debugger is active, making it harder for hackers to use the debugger. Example Protected programs will contain debugger; statements at random places in the program. Characteristics Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection low / medium (with encryption) Debugger obstruction doesn't prevent a hacker from analyzing the code, but increases the time/effort to debug. Resilience low If the code is easily editable, a hacker may remove the debugger statements with a simple search-replace command. Code encryption adds an extra layer of protection to prevent such search-replaces. Code size small / medium (with encryption) Debugger obstruction injects new statements in the code. When applied on large parts of the code with a high obfuscation level and encryption enabled, the code expansion may be significant. Performance none / medium (with encryption) If the debugger is disabled, debugger statements have no impact on runtime performance. However with code encryption applied, the encrypted code has to be decrypted each time the code is executed, even when the debugger is disabled. Configuration Debugger obstruction is part of the debugger subsection of the protection/environment-integrity section. The following configuration enables debugger obstruction and, without additional settings or filters, applies the medium obfuscation level to all functions: processing: protection: environment-integrity: debugger: obstruction: Tip When the feature is not listed in the configuration, it is disabled. Setting: enabled When enabled is unspecified or set to true , debugger obstruction is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true obstruction: enabled: true Filters Use filters with configuration levels to specify in which functions to add debugger obstruction. Debugger obstruction applies the same techniques for all configuration levels, but in varying amounts. Lower levels will inject less obstruction code, higher levels will inject more code. Filter Effect structured-whitelist, structured-blacklist Injected debugger obstruction code in all matching functions. Default: apply the medium configuration level to all functions. obstruction: levels: ... Setting: encrypt When set to true, the debugger statements will additionally be encrypted. Warning While debugger statements have no impact on performance when the debugger is disabled, additionally encrypting does add an overhead, independent of whether the debugger is active. You may want to blacklist performance-critical functions when encryption is enabled. Default: false obstruction: encrypt: true The encrypt property can be further refined with unstructured or structured filters, to control which obstruction statements should additionally be encrypted: obstruction: encrypt: [whitelist/blacklist/structured-whitelist/structured-blacklist]: Verification Look in the obfuscated code for debugger; statements. When encrypt is enabled, the debugger statements should no longer be recognizable as such.","title":"Debugger Obstruction"},{"location":"features/debuggerobstruction.html#debugger-obstruction","text":"Debugger obstruction makes it harder to execute program code when a debugger is active. It does so by randomly injecting debugger statements in the program code. The program execution will pause at each of the injected statements when the debugger is active, making it harder for hackers to use the debugger.","title":"Debugger Obstruction"},{"location":"features/debuggerobstruction.html#example","text":"Protected programs will contain debugger; statements at random places in the program.","title":"Example"},{"location":"features/debuggerobstruction.html#characteristics","text":"Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection low / medium (with encryption) Debugger obstruction doesn't prevent a hacker from analyzing the code, but increases the time/effort to debug. Resilience low If the code is easily editable, a hacker may remove the debugger statements with a simple search-replace command. Code encryption adds an extra layer of protection to prevent such search-replaces. Code size small / medium (with encryption) Debugger obstruction injects new statements in the code. When applied on large parts of the code with a high obfuscation level and encryption enabled, the code expansion may be significant. Performance none / medium (with encryption) If the debugger is disabled, debugger statements have no impact on runtime performance. However with code encryption applied, the encrypted code has to be decrypted each time the code is executed, even when the debugger is disabled.","title":"Characteristics"},{"location":"features/debuggerobstruction.html#configuration","text":"Debugger obstruction is part of the debugger subsection of the protection/environment-integrity section. The following configuration enables debugger obstruction and, without additional settings or filters, applies the medium obfuscation level to all functions: processing: protection: environment-integrity: debugger: obstruction: Tip When the feature is not listed in the configuration, it is disabled.","title":"Configuration"},{"location":"features/debuggerobstruction.html#setting-enabled","text":"When enabled is unspecified or set to true , debugger obstruction is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true obstruction: enabled: true","title":"Setting: enabled"},{"location":"features/debuggerobstruction.html#filters","text":"Use filters with configuration levels to specify in which functions to add debugger obstruction. Debugger obstruction applies the same techniques for all configuration levels, but in varying amounts. Lower levels will inject less obstruction code, higher levels will inject more code. Filter Effect structured-whitelist, structured-blacklist Injected debugger obstruction code in all matching functions. Default: apply the medium configuration level to all functions. obstruction: levels: ...","title":"Filters"},{"location":"features/debuggerobstruction.html#setting-encrypt","text":"When set to true, the debugger statements will additionally be encrypted. Warning While debugger statements have no impact on performance when the debugger is disabled, additionally encrypting does add an overhead, independent of whether the debugger is active. You may want to blacklist performance-critical functions when encryption is enabled. Default: false obstruction: encrypt: true The encrypt property can be further refined with unstructured or structured filters, to control which obstruction statements should additionally be encrypted: obstruction: encrypt: [whitelist/blacklist/structured-whitelist/structured-blacklist]:","title":"Setting: encrypt"},{"location":"features/debuggerobstruction.html#verification","text":"Look in the obfuscated code for debugger; statements. When encrypt is enabled, the debugger statements should no longer be recognizable as such.","title":"Verification"},{"location":"features/functionencryption.html","text":"Function Encryption Function encryption hides the implementation of functions inside of an encrypted string. This string is then evaluated at runtime to recover the original semantics. This technique is well-suited for hiding the implementation of sensitive functions from plain sight. Example Original program : function example(){ console.log(\"this is a sensitive function\") } var x = example() Processed program : var example = eval(a(\"\u443f\uf07c\uf1bd\u4940\u61b9\ub5a6\ue769\u0475\u3833\u2bb6\ud4f7\uaba1\u9c3f\u8ff9\u6f8d\ufb2d\u1add\u2392\u809f\u054e\ue142\ua8c6\uf967\u6f5e\ue769\u0475\ua12a\u59fb\u8d9d\u68c6\u0d32\ud7ba\u954e\uce0f\uc8c2\ued2c\u316c\u64bc\u8abc\u121d\u1b35\u54da\ub967\u61c5\ucedd\ucd07\ube28\u30d7\uf68d\u57e0\ubb09\u6307\u1ba3\u04db\u5851\ud1a3\u443f\uf07c\uf1bd\u4940\u61b9\ub5a6\ue769\u0475\uccaf\u9ca8\u0e71\u2d21\ua928\u75f9\u582d\u149d\uc8e3\ue678\u6cdb\\udc1d\u8aca\u506a\u8d5f\uf19f\u993b\u7d8b\u66c1\ufd83\ubecd\u18d4\u1711\u6d62\ub04e\uad66\u89fd\u6fff\ued16\u344f\u860f\ubf42\u0d47\u5532\u8366\ua1d6\ub5da\ue3f4\u9123\ua76c\u6ffa\ua9ed\u5d96\u8f66\u809f\u054e\u8f1e\u70bc\u25b9\ud27f\u82e2\ub325\u52b2\ue016\u1ebb\u9380\u68c5\u32f2\u8349\u23fb\u8d9d\u68c6\ua5f3\u2970\u62a4\u152d\u1802\u0ad3\ud4f7\uaba1\u9c3f\u8ff9\u6f8d\ufb2d\u6a1d\u4139\u0568\ub991\")); function a(f) { // decryption code (omitted). } var x = example(); Characteristics Characteristic Impact Explanation Effort medium You can enable/disable this feature with a simple configuration flag. It may require some filtering if the program code expands too much, or if performance-critical functions are affected by the obfuscation. Protection medium Function encryption raises the bar for hackers to read code, but doesn't prevent them from eventually understanding the code. Resilience low Hackers may revert the encryption using dynamic program analysis. Code size medium Just like regular string encryption this technique can significantly increase the code size Performance medium A function needs to be decrypted every time it is defined. This means the cost is relatively low for top-level functions, but may be high for functions defined within other functions. It may be necessary to exclude performance-critical functions using filters . Configuration Function encryption is part of the code subsection of the protection section. The following configuration enables function encryption and, without additional settings or filters, applies the medium obfuscation level to all functions: processing: protection: code: encrypt: Tip When the feature is not listed in the configuration, it is disabled. Setting: enabled When enabled is unspecified or set to true , function encryption is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true encrypt: enabled: true Filters Use filters with configuration levels to specify in which functions to add function encryption. Function encryption applies the same techniques for all configuration levels, but in varying amounts. Lower levels will modify fewer lines of code, higher levels will modify more lines of code. Filter Effect structured-whitelist, structured-blacklist Apply function encryption to all matching functions. Default: when function encryption is enabled but no filters are specified, the medium configuration level is applied to all functions. encrypt: levels: ... Verification The function bodies of the encrypted functions should not be present any more in the program.","title":"Function Encryption"},{"location":"features/functionencryption.html#function-encryption","text":"Function encryption hides the implementation of functions inside of an encrypted string. This string is then evaluated at runtime to recover the original semantics. This technique is well-suited for hiding the implementation of sensitive functions from plain sight.","title":"Function Encryption"},{"location":"features/functionencryption.html#example","text":"Original program : function example(){ console.log(\"this is a sensitive function\") } var x = example() Processed program : var example = eval(a(\"\u443f\uf07c\uf1bd\u4940\u61b9\ub5a6\ue769\u0475\u3833\u2bb6\ud4f7\uaba1\u9c3f\u8ff9\u6f8d\ufb2d\u1add\u2392\u809f\u054e\ue142\ua8c6\uf967\u6f5e\ue769\u0475\ua12a\u59fb\u8d9d\u68c6\u0d32\ud7ba\u954e\uce0f\uc8c2\ued2c\u316c\u64bc\u8abc\u121d\u1b35\u54da\ub967\u61c5\ucedd\ucd07\ube28\u30d7\uf68d\u57e0\ubb09\u6307\u1ba3\u04db\u5851\ud1a3\u443f\uf07c\uf1bd\u4940\u61b9\ub5a6\ue769\u0475\uccaf\u9ca8\u0e71\u2d21\ua928\u75f9\u582d\u149d\uc8e3\ue678\u6cdb\\udc1d\u8aca\u506a\u8d5f\uf19f\u993b\u7d8b\u66c1\ufd83\ubecd\u18d4\u1711\u6d62\ub04e\uad66\u89fd\u6fff\ued16\u344f\u860f\ubf42\u0d47\u5532\u8366\ua1d6\ub5da\ue3f4\u9123\ua76c\u6ffa\ua9ed\u5d96\u8f66\u809f\u054e\u8f1e\u70bc\u25b9\ud27f\u82e2\ub325\u52b2\ue016\u1ebb\u9380\u68c5\u32f2\u8349\u23fb\u8d9d\u68c6\ua5f3\u2970\u62a4\u152d\u1802\u0ad3\ud4f7\uaba1\u9c3f\u8ff9\u6f8d\ufb2d\u6a1d\u4139\u0568\ub991\")); function a(f) { // decryption code (omitted). } var x = example();","title":"Example"},{"location":"features/functionencryption.html#characteristics","text":"Characteristic Impact Explanation Effort medium You can enable/disable this feature with a simple configuration flag. It may require some filtering if the program code expands too much, or if performance-critical functions are affected by the obfuscation. Protection medium Function encryption raises the bar for hackers to read code, but doesn't prevent them from eventually understanding the code. Resilience low Hackers may revert the encryption using dynamic program analysis. Code size medium Just like regular string encryption this technique can significantly increase the code size Performance medium A function needs to be decrypted every time it is defined. This means the cost is relatively low for top-level functions, but may be high for functions defined within other functions. It may be necessary to exclude performance-critical functions using filters .","title":"Characteristics"},{"location":"features/functionencryption.html#configuration","text":"Function encryption is part of the code subsection of the protection section. The following configuration enables function encryption and, without additional settings or filters, applies the medium obfuscation level to all functions: processing: protection: code: encrypt: Tip When the feature is not listed in the configuration, it is disabled.","title":"Configuration"},{"location":"features/functionencryption.html#setting-enabled","text":"When enabled is unspecified or set to true , function encryption is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true encrypt: enabled: true","title":"Setting: enabled"},{"location":"features/functionencryption.html#filters","text":"Use filters with configuration levels to specify in which functions to add function encryption. Function encryption applies the same techniques for all configuration levels, but in varying amounts. Lower levels will modify fewer lines of code, higher levels will modify more lines of code. Filter Effect structured-whitelist, structured-blacklist Apply function encryption to all matching functions. Default: when function encryption is enabled but no filters are specified, the medium configuration level is applied to all functions. encrypt: levels: ...","title":"Filters"},{"location":"features/functionencryption.html#verification","text":"The function bodies of the encrypted functions should not be present any more in the program.","title":"Verification"},{"location":"features/nameobfuscation.html","text":"Name Obfuscation Name obfuscation renames identifiers of variables, functions and properties to randomized, meaningless names. Not having the original names available in the code anymore makes the code significantly harder to understand. The default setting applies a safe obfuscation method that just works without having to specify any additional settings. More aggressive obfuscation methods can be enabled, with the option of excluding identifiers from name obfuscation through (structured) blacklists. Example Original program : function surfaceArea(cuboid) { return (cuboid.width * cuboid.height + cuboid.width * cuboid.depth + cuboid.depth * cuboid.height) * 2; } var box = { width: 20, height: 5, depth: 8 }; var box_surface_area = surfaceArea(box); Processed program : function a(d) { return (d.a * d.b + d.a * d.c + d.c * d.b) * 2; } var b = { a: 20, b: 5, c: 8 }; var c = a(b); Characteristics Characteristic Impact Explanation Effort low - high You can enable/disable this feature with a simple configuration flag. If global name obfuscation or property name obfuscation is enabled, you may need to filter some globals/properties to not break the code. Protection high Name obfuscation is one of the most effective obfuscation techniques. It removes the original names of variables, functions and properties, making it much harder for hackers to understand what the code does. Resilience high It is impossible to reverse engineer name obfuscation, as the original names are no longer present in the code. Code size low Name obfuscation will typically slightly shrink the program, as obfuscated names tend to be shorter than their original names. The alphanumeric dictionary will generate smaller programs than the hexadecimal dictionary. Performance none Name obfuscation doesn't affect code performance. Configuration Name obfuscation is part of the code subsection of the protection section. The following configuration enables name obfuscation and, without additional settings or filters, applies the name obfuscation to all variables and functions that are declared locally (i.e. inside a function): protection: code: names: Tip When the feature is not listed in the configuration, it is disabled. Setting: enabled When enabled is unspecified or set to true , name obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true names: enabled: true Setting: globals When the globals setting is specified, name obfuscation of variables and functions that are declared globally (i.e. at the top level of the script and not inside a function) will be enabled. names: globals: Setting: properties When the properties setting is specified, name obfuscation of properties of JavaScript objects will be enabled. names: properties: Setting: modules When the modules setting is specified, name obfuscation of exported and imported names will be enabled. names: modules: Setting: dictionary When the dictionary setting is specified, the obfuscated names will be chosen from the specified dictionary file. names: dictionary: <filename> Setting: dictionary-generator When the dictionary-generator setting is specified, the obfuscated names will be generated using the specified built-in name generator. There are two generators available, an alphanumeric and a hexadecimal. names: dictionary-generator: ALPHANUMERIC|HEXADECIMAL Setting: mapping When the mapping setting is specified, the mapping from the original names to the obfuscated names of variables, functions and properties will be logged to the specified file. names: mapping: <filename> Filters Use blacklist-strings to exclude all identifiers that occur as strings in the code from being name obfuscated. This is a quick and easy way to keep the identifiers of variables, functions and properties that might be accessed through reflection. Default: when name obfuscation is enabled, blacklist-strings is enabled by default. It can be disabled if desired. names: blacklist-strings: false Use unstructured or structured filters (or a combination of both ) to further specify which identifiers should be name obfuscated. Filter Effect whitelist, blacklist Name obfuscate all identifiers that match the given filter. structured-whitelist, structured-blacklist Name obfuscate all identifiers occurring in functions matching the given filter. Default: when name obfuscation is enabled but no filters are specified, all identifiers are obfuscated, except those that are already excluded by blacklist-strings. names: [whitelist/blacklist/structured-whitelist/structured-blacklist]: ... Unstructured filters for globals and properties can be specified in addition to the general name obfuscation filters by putting them at the appropriate level in the configuration: names: ... globals: [whitelist/blacklist]: properties: [whitelist/blacklist]: ... Verification Look in the obfuscated code for variable names, function names and property names; they should have been replaced with short, meaningless names.","title":"Name Obfuscation"},{"location":"features/nameobfuscation.html#name-obfuscation","text":"Name obfuscation renames identifiers of variables, functions and properties to randomized, meaningless names. Not having the original names available in the code anymore makes the code significantly harder to understand. The default setting applies a safe obfuscation method that just works without having to specify any additional settings. More aggressive obfuscation methods can be enabled, with the option of excluding identifiers from name obfuscation through (structured) blacklists.","title":"Name Obfuscation"},{"location":"features/nameobfuscation.html#example","text":"Original program : function surfaceArea(cuboid) { return (cuboid.width * cuboid.height + cuboid.width * cuboid.depth + cuboid.depth * cuboid.height) * 2; } var box = { width: 20, height: 5, depth: 8 }; var box_surface_area = surfaceArea(box); Processed program : function a(d) { return (d.a * d.b + d.a * d.c + d.c * d.b) * 2; } var b = { a: 20, b: 5, c: 8 }; var c = a(b);","title":"Example"},{"location":"features/nameobfuscation.html#characteristics","text":"Characteristic Impact Explanation Effort low - high You can enable/disable this feature with a simple configuration flag. If global name obfuscation or property name obfuscation is enabled, you may need to filter some globals/properties to not break the code. Protection high Name obfuscation is one of the most effective obfuscation techniques. It removes the original names of variables, functions and properties, making it much harder for hackers to understand what the code does. Resilience high It is impossible to reverse engineer name obfuscation, as the original names are no longer present in the code. Code size low Name obfuscation will typically slightly shrink the program, as obfuscated names tend to be shorter than their original names. The alphanumeric dictionary will generate smaller programs than the hexadecimal dictionary. Performance none Name obfuscation doesn't affect code performance.","title":"Characteristics"},{"location":"features/nameobfuscation.html#configuration","text":"Name obfuscation is part of the code subsection of the protection section. The following configuration enables name obfuscation and, without additional settings or filters, applies the name obfuscation to all variables and functions that are declared locally (i.e. inside a function): protection: code: names: Tip When the feature is not listed in the configuration, it is disabled.","title":"Configuration"},{"location":"features/nameobfuscation.html#setting-enabled","text":"When enabled is unspecified or set to true , name obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true names: enabled: true","title":"Setting: enabled"},{"location":"features/nameobfuscation.html#setting-globals","text":"When the globals setting is specified, name obfuscation of variables and functions that are declared globally (i.e. at the top level of the script and not inside a function) will be enabled. names: globals:","title":"Setting: globals"},{"location":"features/nameobfuscation.html#setting-properties","text":"When the properties setting is specified, name obfuscation of properties of JavaScript objects will be enabled. names: properties:","title":"Setting: properties"},{"location":"features/nameobfuscation.html#setting-modules","text":"When the modules setting is specified, name obfuscation of exported and imported names will be enabled. names: modules:","title":"Setting: modules"},{"location":"features/nameobfuscation.html#setting-dictionary","text":"When the dictionary setting is specified, the obfuscated names will be chosen from the specified dictionary file. names: dictionary: <filename>","title":"Setting: dictionary"},{"location":"features/nameobfuscation.html#setting-dictionary-generator","text":"When the dictionary-generator setting is specified, the obfuscated names will be generated using the specified built-in name generator. There are two generators available, an alphanumeric and a hexadecimal. names: dictionary-generator: ALPHANUMERIC|HEXADECIMAL","title":"Setting: dictionary-generator"},{"location":"features/nameobfuscation.html#setting-mapping","text":"When the mapping setting is specified, the mapping from the original names to the obfuscated names of variables, functions and properties will be logged to the specified file. names: mapping: <filename>","title":"Setting: mapping"},{"location":"features/nameobfuscation.html#filters","text":"Use blacklist-strings to exclude all identifiers that occur as strings in the code from being name obfuscated. This is a quick and easy way to keep the identifiers of variables, functions and properties that might be accessed through reflection. Default: when name obfuscation is enabled, blacklist-strings is enabled by default. It can be disabled if desired. names: blacklist-strings: false Use unstructured or structured filters (or a combination of both ) to further specify which identifiers should be name obfuscated. Filter Effect whitelist, blacklist Name obfuscate all identifiers that match the given filter. structured-whitelist, structured-blacklist Name obfuscate all identifiers occurring in functions matching the given filter. Default: when name obfuscation is enabled but no filters are specified, all identifiers are obfuscated, except those that are already excluded by blacklist-strings. names: [whitelist/blacklist/structured-whitelist/structured-blacklist]: ... Unstructured filters for globals and properties can be specified in addition to the general name obfuscation filters by putting them at the appropriate level in the configuration: names: ... globals: [whitelist/blacklist]: properties: [whitelist/blacklist]: ...","title":"Filters"},{"location":"features/nameobfuscation.html#verification","text":"Look in the obfuscated code for variable names, function names and property names; they should have been replaced with short, meaningless names.","title":"Verification"},{"location":"features/numberobfuscation.html","text":"Number Obfuscation Number obfuscation transforms numeric literals into semantically equivalent but more complex expressions. The goal of this operation is to make it harder for hackers to read and interpret these numbers/expressions. Example Original program : var x = 12 + 34; Processed program : var x = (1642227 >> 17) + (53 ^ 23) Characteristics Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection low Number obfuscation makes it slightly more difficult for hackers to read code, but doesn't prevent them from understanding the code. Resilience low Hackers may reverse number obfuscation by static evalutation of the code. Code size low/medium Number obfuscation may somewhat expand the program size, depending on the chosen obfuscation level. Performance low Number obfuscation adds a small computational overhead due to the expanded expressions. It may be necessary to exclude performance-critical functions using filters . Configuration Number obfuscation is part of the code subsection of the protection section. The following configuration enables number obfuscation and, without additional settings or filters, applies the medium obfuscation level to all functions: processing: protection: code: numbers: Tip When the feature is not listed in the configuration, it is disabled. Setting: enabled When enabled is unspecified or set to true , number obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true numbers: enabled: true Filters Use filters with configuration levels to specify in which functions to add number obfuscation. Number obfuscation applies the same techniques for all configuration levels, but in varying amounts. Lower levels will modify fewer lines of code, higher levels will modify more lines of code. Filter Effect structured-whitelist, structured-blacklist Apply number obfuscation to all matching functions. Default: when number obfuscation is enabled but no filters are specified, the medium configuration level is applied to all functions. numbers: levels: ... Verification Look in the obfuscated code for numbers; some of them should have been replaced with semantically equivalent but more complex expressions.","title":"Number Obfuscation"},{"location":"features/numberobfuscation.html#number-obfuscation","text":"Number obfuscation transforms numeric literals into semantically equivalent but more complex expressions. The goal of this operation is to make it harder for hackers to read and interpret these numbers/expressions.","title":"Number Obfuscation"},{"location":"features/numberobfuscation.html#example","text":"Original program : var x = 12 + 34; Processed program : var x = (1642227 >> 17) + (53 ^ 23)","title":"Example"},{"location":"features/numberobfuscation.html#characteristics","text":"Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection low Number obfuscation makes it slightly more difficult for hackers to read code, but doesn't prevent them from understanding the code. Resilience low Hackers may reverse number obfuscation by static evalutation of the code. Code size low/medium Number obfuscation may somewhat expand the program size, depending on the chosen obfuscation level. Performance low Number obfuscation adds a small computational overhead due to the expanded expressions. It may be necessary to exclude performance-critical functions using filters .","title":"Characteristics"},{"location":"features/numberobfuscation.html#configuration","text":"Number obfuscation is part of the code subsection of the protection section. The following configuration enables number obfuscation and, without additional settings or filters, applies the medium obfuscation level to all functions: processing: protection: code: numbers: Tip When the feature is not listed in the configuration, it is disabled.","title":"Configuration"},{"location":"features/numberobfuscation.html#setting-enabled","text":"When enabled is unspecified or set to true , number obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true numbers: enabled: true","title":"Setting: enabled"},{"location":"features/numberobfuscation.html#filters","text":"Use filters with configuration levels to specify in which functions to add number obfuscation. Number obfuscation applies the same techniques for all configuration levels, but in varying amounts. Lower levels will modify fewer lines of code, higher levels will modify more lines of code. Filter Effect structured-whitelist, structured-blacklist Apply number obfuscation to all matching functions. Default: when number obfuscation is enabled but no filters are specified, the medium configuration level is applied to all functions. numbers: levels: ...","title":"Filters"},{"location":"features/numberobfuscation.html#verification","text":"Look in the obfuscated code for numbers; some of them should have been replaced with semantically equivalent but more complex expressions.","title":"Verification"},{"location":"features/propertyaccessobfuscation.html","text":"Property Access Obfuscation Property access obfuscation transforms property accessors from dot notation to square bracket notation . The obfuscation in its simplest form makes the code slightly harder to read and more resilient against automatic refactoring (renaming) tools. It becomes especially powerful when combined with string encryption , which will completely hide the original accessor names. Example Original program : var car = { driver: \"John\", }; alert(car.driver); Processed program : var car = { driver: \"John\", }; alert(car[\"driver\"]); Processed program (with encryption enabled) : var car = { driver: \"John\", }; alert(car[a(\"qs1&@52d\", 2318)]); Characteristics Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It may require some filtering if performance-critical functions are affected by the obfuscation. Protection low/high (with encryption) Property access obfuscation is especially efficient when combined with encryption, as the referenced property names are no longer readable. Resilience low Hackers may reverse the obfuscation using dynamic program analysis. Code size low/medium (with encryption) Program access obfuscation without string encryption has a small impact on the program size. With string encryption enabled, the code expansion may be significant. Performance low/medium (with encryption) Property access obfuscation adds a small runtime overhead. When combined with encryption, the encrypted data have to be decrypted each time the code is executed. It may be necessary to exclude performance-critical functions using filters . Configuration Property access obfuscation is part of the code subsection of the protection section. The following configuration enables property access obfuscation and, without additional settings or filters, applies the medium obfuscation level to all functions: processing: protection: code: property-access: Tip When the feature is not listed in the configuration, it is disabled. Setting: enabled When enabled is unspecified or set to true , property access obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true property-access: enabled: true Setting: encrypt The encrypt setting specifies whether the injected strings, resulting from the dot-to-bracket notation, should additionally be encrypted. When unspecified, encryption is disabled. By specifying the encrypt property, all obfuscated property accesses will additionally be encrypted: property-access: encrypt: The encrypt property can be further refined with unstructured or structured filters, to control which property accesses should additionally be encrypted: property-access: encrypt: [whitelist/blacklist/structured-whitelist/structured-blacklist]: Setting: log You can add a log setting to log, at build time, all replaced property accesses to the specified file. property-access: log: <filename> Filters Use unstructured or structured filters (or a combination of both ) to specify which property accesses should be encrypted. Filter Effect whitelist, blacklist Obfuscate all property accesses whose name (including base) matches the given filter. structured-whitelist, structured-blacklist Obfuscate all property accesses in functions matching the given filter. Default: when property access obfuscation is enabled but no filters are specified, all accesses are obfuscated. property-access: [whitelist/blacklist/structured-whitelist/structured-blacklist]: ... Verification Look in the obfuscated code for property accessors: a.b() They should have been replaced with element accessors: a[\"b\"]()","title":"Property Access Obfuscation"},{"location":"features/propertyaccessobfuscation.html#property-access-obfuscation","text":"Property access obfuscation transforms property accessors from dot notation to square bracket notation . The obfuscation in its simplest form makes the code slightly harder to read and more resilient against automatic refactoring (renaming) tools. It becomes especially powerful when combined with string encryption , which will completely hide the original accessor names.","title":"Property Access Obfuscation"},{"location":"features/propertyaccessobfuscation.html#example","text":"Original program : var car = { driver: \"John\", }; alert(car.driver); Processed program : var car = { driver: \"John\", }; alert(car[\"driver\"]); Processed program (with encryption enabled) : var car = { driver: \"John\", }; alert(car[a(\"qs1&@52d\", 2318)]);","title":"Example"},{"location":"features/propertyaccessobfuscation.html#characteristics","text":"Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It may require some filtering if performance-critical functions are affected by the obfuscation. Protection low/high (with encryption) Property access obfuscation is especially efficient when combined with encryption, as the referenced property names are no longer readable. Resilience low Hackers may reverse the obfuscation using dynamic program analysis. Code size low/medium (with encryption) Program access obfuscation without string encryption has a small impact on the program size. With string encryption enabled, the code expansion may be significant. Performance low/medium (with encryption) Property access obfuscation adds a small runtime overhead. When combined with encryption, the encrypted data have to be decrypted each time the code is executed. It may be necessary to exclude performance-critical functions using filters .","title":"Characteristics"},{"location":"features/propertyaccessobfuscation.html#configuration","text":"Property access obfuscation is part of the code subsection of the protection section. The following configuration enables property access obfuscation and, without additional settings or filters, applies the medium obfuscation level to all functions: processing: protection: code: property-access: Tip When the feature is not listed in the configuration, it is disabled.","title":"Configuration"},{"location":"features/propertyaccessobfuscation.html#setting-enabled","text":"When enabled is unspecified or set to true , property access obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true property-access: enabled: true","title":"Setting: enabled"},{"location":"features/propertyaccessobfuscation.html#setting-encrypt","text":"The encrypt setting specifies whether the injected strings, resulting from the dot-to-bracket notation, should additionally be encrypted. When unspecified, encryption is disabled. By specifying the encrypt property, all obfuscated property accesses will additionally be encrypted: property-access: encrypt: The encrypt property can be further refined with unstructured or structured filters, to control which property accesses should additionally be encrypted: property-access: encrypt: [whitelist/blacklist/structured-whitelist/structured-blacklist]:","title":"Setting: encrypt"},{"location":"features/propertyaccessobfuscation.html#setting-log","text":"You can add a log setting to log, at build time, all replaced property accesses to the specified file. property-access: log: <filename>","title":"Setting: log"},{"location":"features/propertyaccessobfuscation.html#filters","text":"Use unstructured or structured filters (or a combination of both ) to specify which property accesses should be encrypted. Filter Effect whitelist, blacklist Obfuscate all property accesses whose name (including base) matches the given filter. structured-whitelist, structured-blacklist Obfuscate all property accesses in functions matching the given filter. Default: when property access obfuscation is enabled but no filters are specified, all accesses are obfuscated. property-access: [whitelist/blacklist/structured-whitelist/structured-blacklist]: ...","title":"Filters"},{"location":"features/propertyaccessobfuscation.html#verification","text":"Look in the obfuscated code for property accessors: a.b() They should have been replaced with element accessors: a[\"b\"]()","title":"Verification"},{"location":"features/propertydeclarationobfuscation.html","text":"Property Declaration Obfuscation Property declaration obfuscation replaces the names in property declarations with their hexadecimal equivalent. Example Original program : var car = { driver: \"John\", }; Processed program : var car = { ''\\x64\\x72\\x69\\x76\\x65\\x72': \"John\", }; Characteristics Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. Protection medium Property declaration obfuscation makes the property names in the code difficult to read. Resilience low Hackers may reverse the obfuscation by static analyis of the code. Code size medium Program declaration obfuscation expands the size of property names by a factor 3-4. Performance low Property declaration obfuscation doesn't affect performance significantly. Configuration Property declaration obfuscation is part of the code subsection of the protection section. The following configuration enables property declaration obfuscation and, without additional settings or filters, applies the obfuscation to all declared properties: processing: protection: code: property-declarations: Tip When the feature is not listed in the configuration, it is disabled. Setting: enabled When enabled is unspecified or set to true , property declaration obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true property-declarations: enabled: true Setting: log You can add a log setting to log, at build time, all replaced property declarations to the specified file. property-declarations: log: <filename> Filters Use unstructured or structured filters (or a combination of both ) to specify which property declarations should be encrypted. Filter Effect whitelist, blacklist Obfuscate all property declarations whose name (including base) matches the given filter. structured-whitelist, structured-blacklist Obfuscate all property declarations in functions matching the given filter. Default: when property declaration obfuscation is enabled but no filters are specified, all accesses are obfuscated. property-declarations: [whitelist/blacklist/structured-whitelist/structured-blacklist]: ... Verification Look in the obfuscated code for property declarations; they should have been replaced with their hexadecimal equivalent.","title":"Property Declaration Obfuscation"},{"location":"features/propertydeclarationobfuscation.html#property-declaration-obfuscation","text":"Property declaration obfuscation replaces the names in property declarations with their hexadecimal equivalent.","title":"Property Declaration Obfuscation"},{"location":"features/propertydeclarationobfuscation.html#example","text":"Original program : var car = { driver: \"John\", }; Processed program : var car = { ''\\x64\\x72\\x69\\x76\\x65\\x72': \"John\", };","title":"Example"},{"location":"features/propertydeclarationobfuscation.html#characteristics","text":"Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. Protection medium Property declaration obfuscation makes the property names in the code difficult to read. Resilience low Hackers may reverse the obfuscation by static analyis of the code. Code size medium Program declaration obfuscation expands the size of property names by a factor 3-4. Performance low Property declaration obfuscation doesn't affect performance significantly.","title":"Characteristics"},{"location":"features/propertydeclarationobfuscation.html#configuration","text":"Property declaration obfuscation is part of the code subsection of the protection section. The following configuration enables property declaration obfuscation and, without additional settings or filters, applies the obfuscation to all declared properties: processing: protection: code: property-declarations: Tip When the feature is not listed in the configuration, it is disabled.","title":"Configuration"},{"location":"features/propertydeclarationobfuscation.html#setting-enabled","text":"When enabled is unspecified or set to true , property declaration obfuscation is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true property-declarations: enabled: true","title":"Setting: enabled"},{"location":"features/propertydeclarationobfuscation.html#setting-log","text":"You can add a log setting to log, at build time, all replaced property declarations to the specified file. property-declarations: log: <filename>","title":"Setting: log"},{"location":"features/propertydeclarationobfuscation.html#filters","text":"Use unstructured or structured filters (or a combination of both ) to specify which property declarations should be encrypted. Filter Effect whitelist, blacklist Obfuscate all property declarations whose name (including base) matches the given filter. structured-whitelist, structured-blacklist Obfuscate all property declarations in functions matching the given filter. Default: when property declaration obfuscation is enabled but no filters are specified, all accesses are obfuscated. property-declarations: [whitelist/blacklist/structured-whitelist/structured-blacklist]: ...","title":"Filters"},{"location":"features/propertydeclarationobfuscation.html#verification","text":"Look in the obfuscated code for property declarations; they should have been replaced with their hexadecimal equivalent.","title":"Verification"},{"location":"features/shrinking.html","text":"Shrinking The JavaScript obfuscator can shrink code that is not being referenced from other active code, reducing the overall program size. In combination with assumptions , you can use shrinking to remove console logging statements and code that is only executed when debugging variables are set. Configuration Shrinking is part of the processing section. processing: shrinking: Tip When shrinking is not listed in the configuration, it is disabled. Setting: enabled When enabled is unspecified or set to true , shrinking is enabled, otherwise it is disabled. The flag can be used to easily disable all shrinking functionality temporarily while debugging. Default: true shrinking: enabled: true Setting: globals The globals setting specifies whether to shrink global declarations (except for properties). When globals is not listed in the configuration, shrinking of globals is disabled. shrinking: globals: The globals setting can be further refined with unstructured filters, to control which declarations can be shrunk. shrinking: globals: [whitelist/blacklist]: You can add a log setting to log all shrunk declarations to the specified file. shrinking: globals: log: <filename> Setting: properties The properties setting specifies whether to shrink properties. When properties is not listed in the configuration, property shrinking is disabled. shrinking: properties: The properties setting can be further refined with unstructured filters, to control which properties can be shrunk. shrinking: properties: [whitelist/blacklist]: You can add a log setting to log all shrunk properties to the specified file. shrinking: properties: log: <filename> Setting: code The code setting specifies whether to shrink code inside functions (statements, expressions, ...). When code is not listed in the configuration, code shrinking is disabled. When functions are listed in the assumptions section as having no side effects, code shrinking will automatically remove calls to them. This can especially be useful to remove console logging statements. When variables are listed in the assumptions section as being false, code shrinking will automatically replace all their occurrences with a false literal value, and remove all statements and expressions that would no longer reachable as a consequence. You can use this to remove debugging variables and debugging code. shrinking: code: The code setting can be further refined with structured filters, to control in which functions code can be shrunk. shrinking: code: [structured-whitelist/structured-blacklist]:","title":"Shrinking"},{"location":"features/shrinking.html#shrinking","text":"The JavaScript obfuscator can shrink code that is not being referenced from other active code, reducing the overall program size. In combination with assumptions , you can use shrinking to remove console logging statements and code that is only executed when debugging variables are set.","title":"Shrinking"},{"location":"features/shrinking.html#configuration","text":"Shrinking is part of the processing section. processing: shrinking: Tip When shrinking is not listed in the configuration, it is disabled.","title":"Configuration"},{"location":"features/shrinking.html#setting-enabled","text":"When enabled is unspecified or set to true , shrinking is enabled, otherwise it is disabled. The flag can be used to easily disable all shrinking functionality temporarily while debugging. Default: true shrinking: enabled: true","title":"Setting: enabled"},{"location":"features/shrinking.html#setting-globals","text":"The globals setting specifies whether to shrink global declarations (except for properties). When globals is not listed in the configuration, shrinking of globals is disabled. shrinking: globals: The globals setting can be further refined with unstructured filters, to control which declarations can be shrunk. shrinking: globals: [whitelist/blacklist]: You can add a log setting to log all shrunk declarations to the specified file. shrinking: globals: log: <filename>","title":"Setting: globals"},{"location":"features/shrinking.html#setting-properties","text":"The properties setting specifies whether to shrink properties. When properties is not listed in the configuration, property shrinking is disabled. shrinking: properties: The properties setting can be further refined with unstructured filters, to control which properties can be shrunk. shrinking: properties: [whitelist/blacklist]: You can add a log setting to log all shrunk properties to the specified file. shrinking: properties: log: <filename>","title":"Setting: properties"},{"location":"features/shrinking.html#setting-code","text":"The code setting specifies whether to shrink code inside functions (statements, expressions, ...). When code is not listed in the configuration, code shrinking is disabled. When functions are listed in the assumptions section as having no side effects, code shrinking will automatically remove calls to them. This can especially be useful to remove console logging statements. When variables are listed in the assumptions section as being false, code shrinking will automatically replace all their occurrences with a false literal value, and remove all statements and expressions that would no longer reachable as a consequence. You can use this to remove debugging variables and debugging code. shrinking: code: The code setting can be further refined with structured filters, to control in which functions code can be shrunk. shrinking: code: [structured-whitelist/structured-blacklist]:","title":"Setting: code"},{"location":"features/shuffling.html","text":"Shuffling Shuffling changes the order of function declarations in programs. Although not really an obfuscation technique, it can make it slightly harder to see the coherence and dependencies between different parts of the program. Example Original program : function open() {} function write() {} function flush() {} function close() {} Processed program : function close() {} function open() {} function flush() {} function write() {} Characteristics Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection low Shuffling function declarations can make it slightly harder to see the coherence and dependencies between different parts of the program. Resilience high Shuffling cannot be reverted. Code size none Shuffling does not affect the code size. Performance none Shuffling does not affect performance. Configuration Shuffling is part of the code subsection of the protection section. The following configuration enables shuffling: processing: protection: code: shuffle: Tip When the feature is not listed in the configuration, it is disabled. Setting: enabled When enabled is unspecified or set to true , shuffling is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true shuffle: enabled: true Verification The order of declared functions in the obfuscated code has changed.","title":"Shuffling"},{"location":"features/shuffling.html#shuffling","text":"Shuffling changes the order of function declarations in programs. Although not really an obfuscation technique, it can make it slightly harder to see the coherence and dependencies between different parts of the program.","title":"Shuffling"},{"location":"features/shuffling.html#example","text":"Original program : function open() {} function write() {} function flush() {} function close() {} Processed program : function close() {} function open() {} function flush() {} function write() {}","title":"Example"},{"location":"features/shuffling.html#characteristics","text":"Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection low Shuffling function declarations can make it slightly harder to see the coherence and dependencies between different parts of the program. Resilience high Shuffling cannot be reverted. Code size none Shuffling does not affect the code size. Performance none Shuffling does not affect performance.","title":"Characteristics"},{"location":"features/shuffling.html#configuration","text":"Shuffling is part of the code subsection of the protection section. The following configuration enables shuffling: processing: protection: code: shuffle: Tip When the feature is not listed in the configuration, it is disabled.","title":"Configuration"},{"location":"features/shuffling.html#setting-enabled","text":"When enabled is unspecified or set to true , shuffling is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true shuffle: enabled: true","title":"Setting: enabled"},{"location":"features/shuffling.html#verification","text":"The order of declared functions in the obfuscated code has changed.","title":"Verification"},{"location":"features/stringarray.html","text":"String Array Conversion String array conversion moves strings into arrays, and replaces the original strings with calls to functions that can retrieve the original string from the injected arrays. The conversion makes it harder for hackers to read and understand programs. Duplicate strings are automatically detected and won't be duplicated in the array. Example Original program : var x = \"Foo\"; var y = \"Bar\"; Processed program : var a = [\"Foo\",\"Bar\"]; var x = b(11); var y = b(24); Characteristics Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection medium Replacing strings with an obfuscated lookup in a string array makes it harder for hackers to read code, but doesn't prevent them from eventually understanding the code. Resilience low Hackers my revert the obfuscation using dynamic program analysis. Code size low String array conversion may slightly increase the code size. Performance low String array conversion may add a small overhead due to the additional indirection. It may be necessary to exclude performance-critical functions using filters . Configuration String array conversion is part of the strings subsection of the protection/data section. The following configuration enables string-to-array conversion and, without additional settings or filters, converts all strings in the code: protection: data: strings: arrayize: Tip When the feature is not listed in the configuration, it is disabled. Setting: enabled When enabled is unspecified or set to true , debugger obstruction is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true arrayize: enabled: true Setting: log You can add a log setting to log, at build time, all replaced strings to the specified file. arrayize: log: <filename> Filters Use unstructured or structured filters to specify which strings should be converted to arrays, or a combination of both . Filter Effect whitelist, blacklist Convert all strings whose string value matches the given filter. structured-whitelist, structured-blacklist Convert all strings in functions matching the given filter. Default: when string array obfuscation is enabled but no filters are specified, all strings are obfuscated. arrayize: [whitelist/blacklist/structured-whitelist/structured-blacklist]: ... Verification In the obfuscated code, strings have been replaced with injected function calls. The strings themselves have been moved into string arrays.","title":"Array Transformation"},{"location":"features/stringarray.html#string-array-conversion","text":"String array conversion moves strings into arrays, and replaces the original strings with calls to functions that can retrieve the original string from the injected arrays. The conversion makes it harder for hackers to read and understand programs. Duplicate strings are automatically detected and won't be duplicated in the array.","title":"String Array Conversion"},{"location":"features/stringarray.html#example","text":"Original program : var x = \"Foo\"; var y = \"Bar\"; Processed program : var a = [\"Foo\",\"Bar\"]; var x = b(11); var y = b(24);","title":"Example"},{"location":"features/stringarray.html#characteristics","text":"Characteristic Impact Explanation Effort low You can enable/disable this feature with a simple configuration flag. It typically doesn't require any additional filtering. Protection medium Replacing strings with an obfuscated lookup in a string array makes it harder for hackers to read code, but doesn't prevent them from eventually understanding the code. Resilience low Hackers my revert the obfuscation using dynamic program analysis. Code size low String array conversion may slightly increase the code size. Performance low String array conversion may add a small overhead due to the additional indirection. It may be necessary to exclude performance-critical functions using filters .","title":"Characteristics"},{"location":"features/stringarray.html#configuration","text":"String array conversion is part of the strings subsection of the protection/data section. The following configuration enables string-to-array conversion and, without additional settings or filters, converts all strings in the code: protection: data: strings: arrayize: Tip When the feature is not listed in the configuration, it is disabled.","title":"Configuration"},{"location":"features/stringarray.html#setting-enabled","text":"When enabled is unspecified or set to true , debugger obstruction is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true arrayize: enabled: true","title":"Setting: enabled"},{"location":"features/stringarray.html#setting-log","text":"You can add a log setting to log, at build time, all replaced strings to the specified file. arrayize: log: <filename>","title":"Setting: log"},{"location":"features/stringarray.html#filters","text":"Use unstructured or structured filters to specify which strings should be converted to arrays, or a combination of both . Filter Effect whitelist, blacklist Convert all strings whose string value matches the given filter. structured-whitelist, structured-blacklist Convert all strings in functions matching the given filter. Default: when string array obfuscation is enabled but no filters are specified, all strings are obfuscated. arrayize: [whitelist/blacklist/structured-whitelist/structured-blacklist]: ...","title":"Filters"},{"location":"features/stringarray.html#verification","text":"In the obfuscated code, strings have been replaced with injected function calls. The strings themselves have been moved into string arrays.","title":"Verification"},{"location":"features/stringencryption.html","text":"String Encryption String encryption hides strings in programs by replacing them with an encrypted representation of the string. You can apply string encryption to specific strings (such as sensitive API keys), or to all strings in (a part of) the code, to make it harder to read and understand the program. Multiple encryption algorithms and encryption keys are used to add variation to the obfuscation. To decrypt the encrypted messages again, decryption functions are injected at random places in the code. Example Original program : var x = \"Hello, world!\"; Processed program : var x = a(\"&h5@jkl;iud12\", 3490); Characteristics Characteristic Impact Explanation Effort medium You can enable/disable this feature with a simple configuration flag. It may require some filtering if the program code expands too much, or if performance-critical functions are affected by the obfuscation. Protection medium Replacing strings with an encrypted equivalent makes it harder for hackers to read and understand code, but doesn't prevent them from eventually understanding the code. Resilience low Hackers may revert the encryption using dynamic program analysis. Code size medium String encryption may significantly increase the code size. Performance medium Encrypted strings need to be decrypted each time they are accessed. It may be necessary to exclude performance-critical functions using filters . Configuration String encryption is part of the strings subsection of the protection/data section. The following configuration enables string encryption and, without additional settings or filters, encrypts all strings in the code: protection: data: strings: encrypt: Tip When the feature is not listed in the configuration, it is disabled. Setting: enabled When enabled is unspecified or set to true , string encryption is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true encrypt: enabled: true Setting: log You can add a log setting to log, at build time, all encrypted strings to the specified file. encrypt: log: <filename> Filters Use unstructured or structured filters to specify which strings should be encrypted, or a combination of both . Filter Effect whitelist, blacklist Encrypt all strings whose string value matches the given filter. structured-whitelist, structured-blacklist Encrypt all strings in functions matching the given filter. Default: when string encryption is enabled but no filters are specified, all strings are encrypted. encrypt: [whitelist/blacklist/structured-whitelist/structured-blacklist]: ... Verification Encrypted strings should no longer be present in the obfuscated program.","title":"Encryption"},{"location":"features/stringencryption.html#string-encryption","text":"String encryption hides strings in programs by replacing them with an encrypted representation of the string. You can apply string encryption to specific strings (such as sensitive API keys), or to all strings in (a part of) the code, to make it harder to read and understand the program. Multiple encryption algorithms and encryption keys are used to add variation to the obfuscation. To decrypt the encrypted messages again, decryption functions are injected at random places in the code.","title":"String Encryption"},{"location":"features/stringencryption.html#example","text":"Original program : var x = \"Hello, world!\"; Processed program : var x = a(\"&h5@jkl;iud12\", 3490);","title":"Example"},{"location":"features/stringencryption.html#characteristics","text":"Characteristic Impact Explanation Effort medium You can enable/disable this feature with a simple configuration flag. It may require some filtering if the program code expands too much, or if performance-critical functions are affected by the obfuscation. Protection medium Replacing strings with an encrypted equivalent makes it harder for hackers to read and understand code, but doesn't prevent them from eventually understanding the code. Resilience low Hackers may revert the encryption using dynamic program analysis. Code size medium String encryption may significantly increase the code size. Performance medium Encrypted strings need to be decrypted each time they are accessed. It may be necessary to exclude performance-critical functions using filters .","title":"Characteristics"},{"location":"features/stringencryption.html#configuration","text":"String encryption is part of the strings subsection of the protection/data section. The following configuration enables string encryption and, without additional settings or filters, encrypts all strings in the code: protection: data: strings: encrypt: Tip When the feature is not listed in the configuration, it is disabled.","title":"Configuration"},{"location":"features/stringencryption.html#setting-enabled","text":"When enabled is unspecified or set to true , string encryption is enabled, otherwise it is disabled. The flag can be used to easily disable a feature temporarily while debugging. Default: true encrypt: enabled: true","title":"Setting: enabled"},{"location":"features/stringencryption.html#setting-log","text":"You can add a log setting to log, at build time, all encrypted strings to the specified file. encrypt: log: <filename>","title":"Setting: log"},{"location":"features/stringencryption.html#filters","text":"Use unstructured or structured filters to specify which strings should be encrypted, or a combination of both . Filter Effect whitelist, blacklist Encrypt all strings whose string value matches the given filter. structured-whitelist, structured-blacklist Encrypt all strings in functions matching the given filter. Default: when string encryption is enabled but no filters are specified, all strings are encrypted. encrypt: [whitelist/blacklist/structured-whitelist/structured-blacklist]: ...","title":"Filters"},{"location":"features/stringencryption.html#verification","text":"Encrypted strings should no longer be present in the obfuscated program.","title":"Verification"},{"location":"quickstart/bestpractices.html","text":"Best Practices The following configuration file provides a good default configuration to start from. It enables all features that typically don't require additional configuration and don't introduce too much performance overhead. Features which are incompatible with some code patterns (see the individual Feature pages) or may have a significant performance impact are commented out. You can enable them to test the impact on your application. In case of an error or slowdown, you can refine the configuration with a whitelist or blacklist to selectively enable or disable the feature for part of the code respectively. Please refer to the individual Feature pages for full details on the specifics of each feature. processing: assumptions: # You can define a whitelist of debug variables which will always be false # during execution. With shrinking enabled, these variables will then be # optimized away. # false-variables: # whitelist: # - DEBUG no-side-effect-methods: whitelist: - console.log shrinking: # The obfuscator is not always able to detect references to global # variables or properties. You can leave them disabled, or add an extra # blacklist that excludes problematic globals/properties. # globals: # properties: code: protection: data: strings: # Encryption of strings may introduce an excessive overhead for certain # performance-critical functions. You can define a whitelist (to # encrypt specific sensitive strings) or a structured blacklist (to # encrypt all strings, except strings in performance-critical # functions). # encrypt: arrayize: code: names: # The obfuscator is not always able to detect references to global # variables or properties. You can leave them disabled, or add an extra # blacklist that excludes problematic globals/properties. # globals: # properties: property-access: # Encryption of property access obfuscation may introduce an excessive # overhead for certain performance-critical functions. You can leave it # disabled or enable it but add an extra structured blacklist to # exclude performance-critical functions. # encrypt: control-flow: numbers: arithmetic-operations: shuffle: environment-integrity: debugger: obstruction: # Encryption of debugger obstruction may introduce an excessive overhead # for certain performance-critical functions. You can leave it disabled # or enable it but add an extra structured blacklist filter to exclude # performance-critical functions. # encrypt: # Use the prettify option to control whether the written JavaScript files should be # formatted with proper indentation. Only use this for debugging. # output: # prettify: true","title":"Best Practices"},{"location":"quickstart/bestpractices.html#best-practices","text":"The following configuration file provides a good default configuration to start from. It enables all features that typically don't require additional configuration and don't introduce too much performance overhead. Features which are incompatible with some code patterns (see the individual Feature pages) or may have a significant performance impact are commented out. You can enable them to test the impact on your application. In case of an error or slowdown, you can refine the configuration with a whitelist or blacklist to selectively enable or disable the feature for part of the code respectively. Please refer to the individual Feature pages for full details on the specifics of each feature. processing: assumptions: # You can define a whitelist of debug variables which will always be false # during execution. With shrinking enabled, these variables will then be # optimized away. # false-variables: # whitelist: # - DEBUG no-side-effect-methods: whitelist: - console.log shrinking: # The obfuscator is not always able to detect references to global # variables or properties. You can leave them disabled, or add an extra # blacklist that excludes problematic globals/properties. # globals: # properties: code: protection: data: strings: # Encryption of strings may introduce an excessive overhead for certain # performance-critical functions. You can define a whitelist (to # encrypt specific sensitive strings) or a structured blacklist (to # encrypt all strings, except strings in performance-critical # functions). # encrypt: arrayize: code: names: # The obfuscator is not always able to detect references to global # variables or properties. You can leave them disabled, or add an extra # blacklist that excludes problematic globals/properties. # globals: # properties: property-access: # Encryption of property access obfuscation may introduce an excessive # overhead for certain performance-critical functions. You can leave it # disabled or enable it but add an extra structured blacklist to # exclude performance-critical functions. # encrypt: control-flow: numbers: arithmetic-operations: shuffle: environment-integrity: debugger: obstruction: # Encryption of debugger obstruction may introduce an excessive overhead # for certain performance-critical functions. You can leave it disabled # or enable it but add an extra structured blacklist filter to exclude # performance-critical functions. # encrypt: # Use the prettify option to control whether the written JavaScript files should be # formatted with proper indentation. Only use this for debugging. # output: # prettify: true","title":"Best Practices"},{"location":"quickstart/dexguardintegration.html","text":"DexGuard Integration DexGuard leaves JavaScript files largely untouched by default, and only optionally adapts its contents with information about the obfuscated Java elements. You can enable DexGuard's built-in JavaScript obfuscator to shrink and obfuscate the contents of your JavaScript files. Gradle integration To use the JavaScript obfuscator, include the lib/dexguard-gradle-plugin.jar in your build classpath. If you are using the DexGuard Gradle plugin, this dependency should already be configured and no additional dependencies need to be added for the JavaScript obfuscator: buildscript { ..... dependencies { classpath 'com.android.tools.build:gradle:x.y.z' // The Android Gradle plugin. classpath 'com.guardsquare:dexguard-gradle-plugin:' // The DexGuard Gradle plugin. } } DexGuard configuration In your DexGuard configuration file, specify the JavaScript files that you want to obfuscate with the option -obfuscatejavascript . For example: -obfuscatejavascript assets/www/secret/**.js Tip If your application contains HTML files that have embedded JavaScript snippets, it is recommended to also process these with the JavaScript obfuscator. The tool will not obfuscate these files, but it will scan them for references to functions, variables and properties in the processed JavaScript files, and make sure these referenced entities won't be obfuscated or shrunk. Additionally, you should specify the location of the separate file containing the JavaScript-specific configuration settings: -javascriptconfiguration javascript.yml Further reading The Best Practices page provides a template configuration with defaults that work for most JavaScript programs. You can start from this configuration and further refine it to optimize the obfuscation for your application. The Basic Configuration Options page gives a more detailed overview of the different configuration settings to start with. The individual Feature pages provide full details on all available obfuscation features and their specifics.","title":"DexGuard Integration"},{"location":"quickstart/dexguardintegration.html#dexguard-integration","text":"DexGuard leaves JavaScript files largely untouched by default, and only optionally adapts its contents with information about the obfuscated Java elements. You can enable DexGuard's built-in JavaScript obfuscator to shrink and obfuscate the contents of your JavaScript files.","title":"DexGuard Integration"},{"location":"quickstart/dexguardintegration.html#gradle-integration","text":"To use the JavaScript obfuscator, include the lib/dexguard-gradle-plugin.jar in your build classpath. If you are using the DexGuard Gradle plugin, this dependency should already be configured and no additional dependencies need to be added for the JavaScript obfuscator: buildscript { ..... dependencies { classpath 'com.android.tools.build:gradle:x.y.z' // The Android Gradle plugin. classpath 'com.guardsquare:dexguard-gradle-plugin:' // The DexGuard Gradle plugin. } }","title":"Gradle integration"},{"location":"quickstart/dexguardintegration.html#dexguard-configuration","text":"In your DexGuard configuration file, specify the JavaScript files that you want to obfuscate with the option -obfuscatejavascript . For example: -obfuscatejavascript assets/www/secret/**.js Tip If your application contains HTML files that have embedded JavaScript snippets, it is recommended to also process these with the JavaScript obfuscator. The tool will not obfuscate these files, but it will scan them for references to functions, variables and properties in the processed JavaScript files, and make sure these referenced entities won't be obfuscated or shrunk. Additionally, you should specify the location of the separate file containing the JavaScript-specific configuration settings: -javascriptconfiguration javascript.yml","title":"DexGuard configuration"},{"location":"quickstart/dexguardintegration.html#further-reading","text":"The Best Practices page provides a template configuration with defaults that work for most JavaScript programs. You can start from this configuration and further refine it to optimize the obfuscation for your application. The Basic Configuration Options page gives a more detailed overview of the different configuration settings to start with. The individual Feature pages provide full details on all available obfuscation features and their specifics.","title":"Further reading"},{"location":"trouble-shooting/knownlimitations.html","text":"Known Issues and Limitations Stack overflow exceptions The JavaScript obfuscator may require a larger stack size than is typically configured by default on most Java virtual machines. If you encounter a StackOverflowException , try increasing the VM's stack size with the -Xss virtual machine option. For example: -Xss8M will increase the VM's stack size to 8 MB. When building using Gradle, you can set VM options in the gradle.properties configuration file of your project, via the org.gradle.jvmargs=-Xss8M property.","title":"Known Issues and Limitations"},{"location":"trouble-shooting/knownlimitations.html#known-issues-and-limitations","text":"","title":"Known Issues and Limitations"},{"location":"trouble-shooting/knownlimitations.html#stack-overflow-exceptions","text":"The JavaScript obfuscator may require a larger stack size than is typically configured by default on most Java virtual machines. If you encounter a StackOverflowException , try increasing the VM's stack size with the -Xss virtual machine option. For example: -Xss8M will increase the VM's stack size to 8 MB. When building using Gradle, you can set VM options in the gradle.properties configuration file of your project, via the org.gradle.jvmargs=-Xss8M property.","title":"Stack overflow exceptions"}]}